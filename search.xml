<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CSS selector-8 | 偽元素 (before, after, selection)</title>
      <link href="/2023/11/14/css-pseudo-element/"/>
      <url>/2023/11/14/css-pseudo-element/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.discordapp.com/attachments/1116009887550423102/1173781493169016882/image.png?ex=65653433&is=6552bf33&hm=85713a785cd2680bed7a8fcf2f9f18af9b1ac2b1e040ff4502a5f1e1e4d70097&"></p>]]></content>
      
      
      <categories>
          
          <category> CSS 選擇器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> front-end </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS selector-7 | 偽類別 - 語言 &amp; 段落首字母</title>
      <link href="/2023/11/14/css-pseudo-class-language/"/>
      <url>/2023/11/14/css-pseudo-class-language/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.discordapp.com/attachments/1116009887550423102/1173778012232233080/image.png?ex=656530f5&is=6552bbf5&hm=8b4f2d757abc7de9ccb3babe6cdc6edbc06ea09233d2c5d85d598809526dcc2a&"></p>]]></content>
      
      
      <categories>
          
          <category> CSS 選擇器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> front-end </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS selector-6 | 偽類別 - 表單</title>
      <link href="/2023/11/14/css-pseudo-class-from/"/>
      <url>/2023/11/14/css-pseudo-class-from/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.discordapp.com/attachments/1116009887550423102/1173779491567456326/image.png?ex=65653256&is=6552bd56&hm=a76a14967dce131b87a7877b6e06c2486c8d21bcac9346d85f96afa0bd9959bc&"></p>]]></content>
      
      
      <categories>
          
          <category> CSS 選擇器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> front-end </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS selector-5 | 偽類別 - child &amp; of-type</title>
      <link href="/2023/11/14/css-pseudo-class-child-of-type/"/>
      <url>/2023/11/14/css-pseudo-class-child-of-type/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.discordapp.com/attachments/1116009887550423102/1173778149939630211/image.png?ex=65653116&is=6552bc16&hm=41f8f06d3cad791aa1cbe828c30e37138d422303a03a76b225aa2f9f613fd32c&"></p><h2 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h2><h2 id="迴圈"><a href="#迴圈" class="headerlink" title="迴圈"></a>迴圈</h2>]]></content>
      
      
      <categories>
          
          <category> CSS 選擇器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> front-end </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS selector-4 | 偽類別 - 條件 (has, not...)</title>
      <link href="/2023/11/14/css-pseudo-class-conditional/"/>
      <url>/2023/11/14/css-pseudo-class-conditional/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.discordapp.com/attachments/1116009887550423102/1173778046361280603/image.png?ex=656530fd&is=6552bbfd&hm=0b1d6a22503eba5e7eed4e9fc4aa8706519f4d900c9fb754e1cd018883a7ad5a&"></p>]]></content>
      
      
      <categories>
          
          <category> CSS 選擇器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> front-end </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS selector-3 | 偽類別 - 動作 / 連結</title>
      <link href="/2023/11/14/css-pseudo-class-active/"/>
      <url>/2023/11/14/css-pseudo-class-active/</url>
      
        <content type="html"><![CDATA[<p><img src="https://media.discordapp.net/attachments/1116009887550423102/1173776634579529778/image.png?ex=65652fad&is=6552baad&hm=c196df4d74d6e16daaf18728bf3c580338b78eea7b571a41eb67e1149135d412&=&width=1231&height=306"></p>]]></content>
      
      
      <categories>
          
          <category> CSS 選擇器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> front-end </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS selector-2 | 偽類別 - 親代 &amp; 子代</title>
      <link href="/2023/11/14/css-pseudo-class-relative/"/>
      <url>/2023/11/14/css-pseudo-class-relative/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.discordapp.com/attachments/1116009887550423102/1173777107189518466/image.png?ex=6565301e&is=6552bb1e&hm=d0d089c6eef269e812076d89fa214742b6fcbbdf0a53c27b139e89491cf60bf3&"></p>]]></content>
      
      
      <categories>
          
          <category> CSS 選擇器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> front-end </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS selector-1 | 優先權 (specificity)</title>
      <link href="/2023/11/14/css-specificity/"/>
      <url>/2023/11/14/css-specificity/</url>
      
        <content type="html"><![CDATA[<p><img src="https://media.discordapp.net/attachments/1116009887550423102/1173771288800665701/image.png?ex=65652ab2&is=6552b5b2&hm=785267c32ab2b2f5fe4c2793652f6f87c36a99b81eebf5c4f8ac9666774e639c&=&width=1186&height=656"></p>]]></content>
      
      
      <categories>
          
          <category> CSS 選擇器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> front-end </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML | 標籤結構 &amp; 切版設計</title>
      <link href="/2023/11/13/html-structure/"/>
      <url>/2023/11/13/html-structure/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.discordapp.com/attachments/1116009887550423102/1173774265514991647/image.png?ex=65652d78&is=6552b878&hm=e797c910c2ab1375725c8df33c26f76a470d105854ba4c7fb2cdb691f8c1b633&"></p><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/HTML">HTML</a> （HyperText Markup Language，超文本標記語言）是前端三大語言之一，是網頁內容的主體。它的語意結構將關係到 SEO 搜尋結果，是改善「搜尋引擎最佳化」的關鍵。同時，也是設計「<a href="https://accessibility.moda.gov.tw/Download/Detail/1419?Category=28">無障礙網站</a>」時需要精心安排的重點。透過 <a href="https://pagespeed.web.dev/">PageSpeed Insight</a> 可以了解特定網站的優劣，檢測「效能、無障礙功能、最佳做法、搜尋引擎最佳化」四個指標，更可以查找<a href="https://developers.google.com/speed/docs/insights/v5/about?hl=zh-tw">文件</a>了解改善方向。</p><h2 id="建構-HTML-的步驟"><a href="#建構-HTML-的步驟" class="headerlink" title="建構 HTML 的步驟"></a>建構 HTML 的步驟</h2><p>為了提升 HTML 的建構效率，建議將 HTML 結構模組化，避免檢查結構時可能的混亂。首先，設定容器時，建議將每個章節分為 header 、 .content 以及 footer。(如果沒有相關內容，可以省略)其次，才依照功能及內容，選擇相符的標籤，填入先前建立的容器中。</p><ol><li>設定容器<ol><li>語意結構標籤</li><li>無語意結構標籤</li></ol></li><li>設定功能與內容<ol><li>功能</li><li>內容</li></ol></li></ol><h3 id="1-設定容器"><a href="#1-設定容器" class="headerlink" title="1. 設定容器"></a>1. 設定容器</h3><p>結構標籤沒有特殊功能，主要是將有關連的內容群組化，並且幫助 SEO 分辨內容類別。</p><ul><li>語意容器<ul><li>結構<ul><li>header 頂端，大多放作者名稱、LOGO、搜尋欄</li><li>footer 末端，大多放作者、版權、文件相關連結</li></ul></li><li>內容<ul><li>main 主要，沒有和其他頁面重複的內容</li><li>aside 另外，和主要內容無關 &#x2F; 間接相關的內容</li><li>nav: navigation 選單，設置多個連結，大多放側邊欄、頁面導覽、麵包屑</li></ul></li><li>內容類型<ul><li>article 文章，獨立結構的 post 或新聞文章</li><li>section 章節，通用的分段結構，多用在搜尋結果、地圖顯示、控制項等。</li></ul></li></ul></li><li>無語意容器<ul><li>div: division，群組標籤用的工具</li><li>span，用於內文重要性的視覺化外觀控制</li></ul></li></ul><h3 id="2-設定功能與內容"><a href="#2-設定功能與內容" class="headerlink" title="2. 設定功能與內容"></a>2. 設定功能與內容</h3><p>除了幫助 SEO 更好的了解網頁內容，許多標籤也有特殊的功能。細節繁多，不及備載，就帶著耐心查看文件吧！</p><ul><li>功能<ul><li>連結<ul><li>a</li></ul></li><li>表單<ul><li>form</li></ul></li></ul></li><li>內容<ul><li>媒體<ul><li>img</li><li>video</li><li>radio</li></ul></li><li>文字<ul><li>標題<ul><li>title</li><li>h1 ~ h6</li></ul></li><li>內文<ul><li>p 段落</li><li>blockquote 引言</li><li>figure 獨立內容，像是雜誌圖片搭配文字說明<ul><li>figcaption 獨立內容說明</li></ul></li></ul></li><li>重要性<ul><li>strong (b)</li><li>em (i)</li><li>del: delete 刪除線 (s) ，常用在特價</li><li>ins: inserted 更新</li></ul></li></ul></li><li>表格 (table)<ul><li>結構<ul><li>caption 標題，表格外說明標題</li><li>thead</li><li>tbody</li><li>tfoot</li></ul></li><li>內容<ul><li>tr: table row，就算沒分欄，裡面也必須有 <code>&lt;td&gt;</code></li><li>td: table definition</li><li>th: table heading</li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> front-end </tag>
            
            <tag> html </tag>
            
            <tag> layout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS | JEST 測試驅動開發 (TDD)</title>
      <link href="/2023/11/13/js-TDD/"/>
      <url>/2023/11/13/js-TDD/</url>
      
        <content type="html"><![CDATA[<p>TDD (Test-Driven Development) 測試驅動開發，是一種以規格測試起稿，再藉此完善功能的開發方式。老師教學使用的是 npm 套件 jest，不知道還有沒有其他類似功能的套件呢？</p><h2 id="理論"><a href="#理論" class="headerlink" title="理論"></a>理論</h2><ul><li><p>為什麼要先寫測試？</p><ul><li>依據測試規格開發，可避免開發過程中的疏漏。</li><li>撰寫程式碼的過程中，開發人員將保有信心。</li><li>階段性開發，清楚知道錯誤範圍。</li><li>確保重購程式碼的過程順利，在外部條件不改變的情況下，調整內部程式碼。</li></ul></li><li><p>3 A 開發步驟：</p><ul><li>Arrange 設置</li><li>Act 執行</li><li>Assert 斷言</li></ul></li><li><p>❗ 每項測試盡量精簡，確保最小測試範圍。</p></li></ul><h2 id="測試設計"><a href="#測試設計" class="headerlink" title="測試設計"></a>測試設計</h2><p>TDD 的過程分為兩個部分，一個是撰寫測試用的程式碼，一個是撰寫真正的專案功能開發所需要的程式碼。撰寫測試用程式碼時，只需要根據人類語言的邏輯依序寫出美行程式碼，而先不用在意程式是能順利運作。(等到專案功能實作時再修正)</p><ul><li>設置物件 &#x2F; 函數 &#x2F; 類別<ul><li><ol><li>寫出結果判斷<br>這是 JEST 獨有的語法，將比較結果是否符合預期。<br><code>expect(account.balance).toBe(7);</code><br><code>expect(動作).toBe(理想結果)</code></li></ol></li><li><ol start="2"><li>寫出參數判斷<br>為了方便檢視引數導致的變化，建議也將引數作為檢查對象。<br><code>expect(amount).toBe(3);</code></li></ol></li></ul></li></ul><blockquote><h3 id="JEST-的安裝與使用"><a href="#JEST-的安裝與使用" class="headerlink" title="JEST 的安裝與使用"></a>JEST 的安裝與使用</h3><p>使用 npm 安裝後，將 package.json 檔案中的 script:{test: …} 的內容改為「jest」並存檔，之後就可以執行 <code>npm run test</code> 運行 jest 的測試程序了。所有小步驟，全都寫在下面囉！</p><ol start="0"><li>記得所在專案必須先初始化為 npm 專案 <code>npm init -y</code><br><code>-y</code> 表示同意所有預設選項。</li><li>安裝套件 <code>npm install --save-dev jest</code><br>可以縮寫為 <code>npm i -d</code>，表示安裝 jest，並且記錄到 package.json 檔案中的 develope 開發軟體清單中。</li><li>查看套件是否有順利安裝<br>查看 package &#x2F; dependencies 的屬性是否有安裝的套件。</li><li>修改 script 指令</li></ol><ul><li><ol><li>修改 <code>test</code> 指令為 <code>jest</code> &gt; <code>scripts: &#123; test: &quot;jest&quot;&#125;</code> 。</li></ol></li><li><ol start="2"><li>❗ 存檔 ❗</li></ol></li></ul><ol start="4"><li>新增測試檔案的專屬資料夾 <code>__tests__</code><br>如果沒有建立此資料夾，將無法順利運作。請務必記得在 tests 結尾加「s」❗</li><li>新增測試用程序的檔案 <code>xxx_spec.js</code><br>spec 是 specification 的縮寫，就是「規格」的意思。</li></ol></blockquote><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>根據 3A 的測試理論，先從物件的宣告開始，再撰寫程式運作的順序及過程。</p><ol><li>宣告</li></ol><ul><li>const &#x2F; let &#x2F; var</li><li>class</li><li>function</li></ul><ol start="2"><li>運作 function()</li></ol><blockquote><h3 id="主管帶領新人測試開發"><a href="#主管帶領新人測試開發" class="headerlink" title="主管帶領新人測試開發"></a>主管帶領新人測試開發</h3><p>未來若有幸擔任主管職位，訓練新人進行測試開發時，可以先教導新人實作，而後再教導新人撰寫規格書。因為主管對於實務上需要檢查的案例有較豐富的經驗，撰寫規格書時更能確保品質，也具有將客戶需求轉換為程式規格的能力。</p><ul><li><ol><li>主管寫規格，新人實作</li></ol></li><li><ol start="2"><li>新人寫規格，主管實作</li></ol></li></ul></blockquote><h2 id="實作歷程範例"><a href="#實作歷程範例" class="headerlink" title="實作歷程範例"></a>實作歷程範例</h2><ul><li>建構基本架構</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BankAccount</span> &#123;</span><br><span class="line">  <span class="title function_">deposit</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">balance</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;可以存錢&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 3A, Arrange, Act, Assert</span></span><br><span class="line">  <span class="comment">// 1. 生帳號，開戶 10</span></span><br><span class="line">  <span class="keyword">const</span> account = <span class="keyword">new</span> <span class="title class_">BankAccount</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="comment">// 2. 存 10 元</span></span><br><span class="line">  account.<span class="title function_">deposit</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="comment">// 3. 餘 20 元</span></span><br><span class="line">  <span class="title function_">expect</span>(account.<span class="property">balance</span>).<span class="title function_">toBe</span>(<span class="number">20</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>完整化</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BankAccount</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">amount</span> = amount;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">deposit</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">amount</span> += amount;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">balance</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">amount</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;可以存錢 20 元&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 3A, Arrange, Act, Assert</span></span><br><span class="line">  <span class="comment">// 1. 生帳號，開戶 10</span></span><br><span class="line">  <span class="keyword">const</span> account = <span class="keyword">new</span> <span class="title class_">BankAccount</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="comment">// 2. 存 20 元</span></span><br><span class="line">  account.<span class="title function_">deposit</span>(<span class="number">20</span>);</span><br><span class="line">  <span class="comment">// 3. 餘 30 元</span></span><br><span class="line">  <span class="title function_">expect</span>(account.<span class="property">balance</span>).<span class="title function_">toBe</span>(<span class="number">30</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>持續完整化，直到符合所有規格</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&quot;可以存 10 元&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> account = <span class="keyword">new</span> <span class="title class_">BankAccount</span>(<span class="number">10</span>);</span><br><span class="line">  account.<span class="title function_">deposit</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="title function_">expect</span>(account.<span class="property">balance</span>).<span class="title function_">toBe</span>(<span class="number">20</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;可以存 20 元&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> account = <span class="keyword">new</span> <span class="title class_">BankAccount</span>(<span class="number">10</span>);</span><br><span class="line">  account.<span class="title function_">deposit</span>(<span class="number">20</span>);</span><br><span class="line">  <span class="title function_">expect</span>(account.<span class="property">balance</span>).<span class="title function_">toBe</span>(<span class="number">30</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;不可以存 0 元或是小於 0 元的金額&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> account = <span class="keyword">new</span> <span class="title class_">BankAccount</span>(<span class="number">10</span>);</span><br><span class="line">  account.<span class="title function_">deposit</span>(-<span class="number">20</span>);</span><br><span class="line">  <span class="title function_">expect</span>(account.<span class="property">balance</span>).<span class="title function_">toBe</span>(<span class="number">10</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;可以領錢&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> account = <span class="keyword">new</span> <span class="title class_">BankAccount</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="keyword">const</span> amount = account.<span class="title function_">withdraw</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">expect</span>(amount).<span class="title function_">toBe</span>(<span class="number">3</span>);</span><br><span class="line">  <span class="title function_">expect</span>(account.<span class="property">balance</span>).<span class="title function_">toBe</span>(<span class="number">7</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;不能領 0 元或是小於 0 元的金額&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> account = <span class="keyword">new</span> <span class="title class_">BankAccount</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="keyword">const</span> amount = account.<span class="title function_">withdraw</span>(-<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">expect</span>(amount).<span class="title function_">toBe</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="title function_">expect</span>(account.<span class="property">balance</span>).<span class="title function_">toBe</span>(<span class="number">10</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;不能領超過本身餘額&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> account = <span class="keyword">new</span> <span class="title class_">BankAccount</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="keyword">const</span> amount = account.<span class="title function_">withdraw</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">expect</span>(amount).<span class="title function_">toBe</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="title function_">expect</span>(account.<span class="property">balance</span>).<span class="title function_">toBe</span>(<span class="number">10</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> front-end </tag>
            
            <tag> java-script </tag>
            
            <tag> testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>個人部落格架設-1 | GitHub Pages 建立個人網域</title>
      <link href="/2023/10/29/github-pages/"/>
      <url>/2023/10/29/github-pages/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在高見龍老師的建議下，開始以 Blog 記錄學習過程。<br>加強學習記憶，讓自己離成功更進一步。</p></blockquote><p>架設個人網站，能夠完全掌握個人流量，以及確保資料的保存。相較於一般的部落格平台，可以避免因為平台維護而損失流量，或是因為平台關閉而遺失資料。而且架設基本的個人「靜態網站」，只需要短短 10 分鐘。在靜態網站下，每個觀看者所看到的網頁都是相同的，是固定的網頁內容。不像「動態網站」，會因為使用者的差異，而呈現個人化的顯示資料，例如：推薦商品、廣告、未讀文章等等。</p><table><thead><tr><th>優點</th><th>缺點</th></tr></thead><tbody><tr><td>個人資料庫</td><td>必須學習 Git, GitHub</td></tr><tr><td>個人化版面設計</td><td>必須學習 HTML, CSS, JS</td></tr><tr><td>可以個人化網域<br>(需支付網域費用，513up&#x2F;年)</td><td>可能要花費個人網域費用</td></tr></tbody></table><h2 id="建立-user-name-github-io-的-repo"><a href="#建立-user-name-github-io-的-repo" class="headerlink" title="建立 user-name.github.io 的 repo"></a>建立 <code>user-name.github.io</code> 的 repo</h2><p>GitHub 是基於 Git 工具而設立的網路服務，其中 repo (repository) 就是儲存資料的倉庫。在一個 GitHub 中可以建立多個 repo，分別儲存不同的專案，並且依照個人習慣隨意命名。不過我們這次使用的是 GitHub 特別提供的 GitHub Pages 服務，在符合 GitHub Pages 的命名規則下才能順利運作。因此用於建立個人網域的專案名稱，必須是 <code>user-name.github.io</code>——以 GitHub 帳號起頭，並且以 <code>.github.io</code> 結尾。由此，個人網站的網域空間就已建立完畢，可以開始編寫個人網站的程式碼了。(個人網站網址即 <code>https://user-name.github.io</code>)</p><h2 id="影片完整教學"><a href="#影片完整教學" class="headerlink" title="影片完整教學"></a>影片完整教學</h2><p><a href="https://www.youtube.com/watch?v=erKYtw4Rfhk&ab_channel=CodeSheep%E7%A8%8B%E5%BA%8F%E7%BE%8A">手把手教你从 0 开始搭建自己的个人博客</a>，程序羊</p><iframe width="560" height="315" src="https://www.youtube.com/embed/erKYtw4Rfhk?si=HS8ni444vEcNHFnH&amp;start=886" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><hr><p>參考資料：</p><ul><li><a href="https://gitbook.tw/chapters/github/using-github-pages">使用 GitHub 免費製作個人網站</a>，高見龍</li><li><a href="https://medium.com/%E9%80%B2%E6%93%8A%E7%9A%84-git-git-git/%E5%BE%9E%E9%9B%B6%E9%96%8B%E5%A7%8B-%E7%94%A8github-pages-%E4%B8%8A%E5%82%B3%E9%9D%9C%E6%85%8B%E7%B6%B2%E7%AB%99-fa2ae83e6276">從零開始: 用 github pages 上傳靜態網站</a>，sexyoung</li><li><a href="https://pages.github.com/">GitHub Pages</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 個人部落格架設 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> front-end </tag>
            
            <tag> software </tag>
            
            <tag> back-end </tag>
            
            <tag> full-end </tag>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
            <tag> github-pages </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
