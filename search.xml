<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>個人部落格架設-2 | Hexo 管理 markdown 文章</title>
      <link href="/posts/hexo/"/>
      <url>/posts/hexo/</url>
      
        <content type="html"><![CDATA[<p>使用 Hexo 可以自動套用主題樣式並部屬靜態網頁到 GitHub Pages，搭配 markdown 語法撰寫文章，能夠節省許多網頁製作的時間。</p><table><thead><tr><th>優點</th><th>缺點</th></tr></thead><tbody><tr><td>更新快速</td><td>必須學習 markdown。</td></tr><tr><td>版面簡單乾淨</td><td>風格單調、制式化。<br>或是必須勤於撰寫 CSS。</td></tr></tbody></table><h2 id="用-markdown-撰寫文章"><a href="#用-markdown-撰寫文章" class="headerlink" title="用 markdown 撰寫文章"></a>用 markdown 撰寫文章</h2><p><a href="https://markdown.com.cn/basic-syntax/emphasis.html">markdown</a>語法是一種語法規格，可以使用任何編輯器編寫。而我是使用 vscode 搭配 markdown 的擴充套件，因為可以省去學習新工具的時間，以及省去下達 Hexo 指令時需要切換工具的時間。</p><table><thead><tr><th>VScode 擴充工具推薦</th><th>用途</th></tr></thead><tbody><tr><td>Markdown All in One</td><td>綜合的 markdown 語法工具，功能繁多不及備載。</td></tr><tr><td>Markdown Paste</td><td>將複製的資料，以 markdown 語法貼上。</td></tr><tr><td>Markdown Preview Enhanced</td><td>預覽 markdown 語法檔案的效果。</td></tr><tr><td>Markdown Preview Github Styling</td><td>以 GitHub 樣式預覽 markdown 語法檔案的效果。</td></tr><tr><td>Markdown Table Prettifier</td><td>在編寫 markdown 語法中的表格時，依據表格內容對齊欄位寬度。</td></tr></tbody></table><h2 id="用-Hexo-管理與維護網站"><a href="#用-Hexo-管理與維護網站" class="headerlink" title="用 Hexo 管理與維護網站"></a>用 Hexo 管理與維護網站</h2><p><a href="https://hexo.io/zh-tw/index.html">Hexo</a>是我在 Windows 系統下唯一順利安裝的 GitHub Pages 部屬工具，相關的教學文章即影片也更豐富。其他的管理工具大多建議搭配 MacOS 使用，並不符合我的作業環境。</p><blockquote><p><strong>挑選文章管理輔助工具：</strong><br>管理的工具有非常多種，而我最後選擇的是 Hexo，因為他是我找到唯一技術文件有簡體中文版本的文章管理輔助工具。</p><ul><li><a href="https://jekyllrb.com/">Jekyll</a>：搭配 Ruby。<ul><li><a href="https://www.youtube.com/watch?v=5z7_qp0CWBY">教學影片–Jekyll on Windows - And Github Pages Hosting</a></li></ul></li><li><a href="http://octopress.org/">Octopress</a></li><li><a href="https://gohugo.io/">Hugo</a>：搭配 Go。</li><li><a href="https://www.youtube.com/watch?v=s1O-8zhPQmU">教學影片–Building a custom site with Hugo on GitHub</a><ul><li>推薦主題：<ol><li><a href="https://themes.gohugo.io/themes/lotusdocs/">Lotus Docs</a></li><li><a href="https://themes.gohugo.io/themes/hugo-theme-relearn/">Relearn</a></li></ol></li></ul></li></ul></blockquote><h3 id="安裝-Hexo"><a href="#安裝-Hexo" class="headerlink" title="安裝 Hexo"></a>安裝 Hexo</h3><p>依照官方文件進行<a href="https://hexo.io/zh-tw/docs/">安裝</a>。</p><ol><li>在確保環境中已安裝 node.js 和 git 的情況下，安裝 hexo：<code>$ npm install -g hexo-cli</code></li><li>新建專案資料夾，並讓終端機進入路徑。</li><li>初始化 hexo 專案：<code>$ hexo init</code></li><li>安裝 hexo 必要套件：<code>$ npm install</code></li><li>開啟 server，確認專案是否順利建立：<code>$ hexo s</code></li></ol><h3 id="將-Hexo-專案部署到-GitHub-Pages"><a href="#將-Hexo-專案部署到-GitHub-Pages" class="headerlink" title="將 Hexo 專案部署到 GitHub Pages"></a>將 Hexo 專案部署到 GitHub Pages</h3><p>根據<a href="https://hexo.io/zh-tw/docs/github-pages#%E4%B8%80%E9%8D%B5%E9%83%A8%E5%B1%AC">官方文件</a>，使用一鍵部屬。</p><ol><li>安裝<a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>：<code>$ npm install hexo-deployer-git --save</code></li><li>設定 <code>\_config.yml</code> 檔案中的部屬設定：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: &#x27;git&#x27;</span><br><span class="line">  repo: https://github.com/&lt;username&gt;/&lt;project&gt;</span><br><span class="line">  # example, https://github.com/hexojs/hexojs.github.io</span><br><span class="line">  branch: gh-pages</span><br></pre></td></tr></table></figure><ol start="3"><li>清空發布的檔案： <code>$ hexo clean</code></li><li>建置要發布的檔案： <code>$ hexo deploy</code></li><li>瀏覽自己的 Github Pages 頁面 <code>&lt;GitHub 用戶名&gt;.github.io</code>，檢查網站是否順利部屬。</li></ol><blockquote><h4 id="修改文章永久連結-Permalink"><a href="#修改文章永久連結-Permalink" class="headerlink" title="修改文章永久連結 (Permalink)"></a>修改文章<a href="https://hexo.io/zh-tw/docs/permalinks.html">永久連結</a> (Permalink)</h4><p>在 Hexo 的 <code>_config.yml</code> 中，預設的文章路徑 <code>permalink</code> 為 <code>:year/:month/:day/:title/</code>，會將文章的 url 設定為類似 <code>2013/07/14/hello-world/</code> 的結果。但是我希望路徑能夠固定，所以我將 permalink 設定為 <code>permalink: &quot;posts/:name/&quot;</code>，就會在每篇文章的路徑前加上 <code>post/</code>，並且以檔案名稱作為最後路徑。搭配<a href="https://hexo.io/docs/tag-plugins#Include-Assets">標籤外掛</a> (Tag Plugins)，能將網頁設定的資料作為變數自動更新，有利於未來更換網域時的轉換，也能快速連結自己的相關文章。</p></blockquote><h3 id="使用-Hexo-管理與更新文章"><a href="#使用-Hexo-管理與更新文章" class="headerlink" title="使用 Hexo 管理與更新文章"></a>使用 Hexo 管理與更新文章</h3><p>每次的更新流程：</p><ol><li><code>hexo cl</code>： clean，清除所建立的靜態檔案。</li><li><code>hexo g</code>： generate，建立 public folder 中的靜態檔案。<br>(可省略的步驟，執行 <code>hexo d</code> 將會自動執行 <code>hexo g</code>)</li><li><code>hexo s</code>： server，本機端查看渲染效果。</li><li><code>hexo d</code>： deploy，部署到 Github Pages。</li></ol><p>每次更新到後，需要等待約 1 分鐘，Github Pages 才會更新。</p><h3 id="套用與變更-Hexo-網站主題"><a href="#套用與變更-Hexo-網站主題" class="headerlink" title="套用與變更 Hexo 網站主題"></a>套用與變更 Hexo 網站主題</h3><p>在 Hexo 官網的<a href="https://hexo.io/themes/">主題頁面</a>中，有多種開源主題可供挑選，未來有能力也可以主動分享 😊<br>找到喜歡的主題後，每個主題通常都會有安裝說明，只需要按照主題問件進行安裝即可。<br>通常的主題安裝流程：</p><ol><li>下載主題檔案：<code>$ git clone &#39;主題網址&#39;</code></li><li>安裝主題必須的套件： <code>$ npm init</code></li><li>建立主題專屬的 <code>_config.主題名稱.yml</code><ol><li>進入 <code>themes</code> 資料夾，複製 <code>_config.yml</code> 到專案最外層</li><li>更名為 <code>_config.主題名稱.yml</code><br>(以後要修改此樣式的專屬設定，就在這裡變更資料)</li></ol></li><li>更改在外層的初始 <code>_config.yml</code> 中的 <code>theme: 主題樣式名稱</code>，輸入要套用的主題樣式名稱<br>(主題樣式名稱，可參考 <code>themes</code> 資料夾中安裝的主題資料夾名稱)</li></ol><table><thead><tr><th>編號</th><th>推薦樣式</th></tr></thead><tbody><tr><td>1</td><td><a href="https://github.com/zchengsite/hexo-theme-oranges">Oranges</a></td></tr><tr><td>2</td><td><a href="https://github.com/adisaktijrs/hexo-theme-minima">Minima</a></td></tr><tr><td>3</td><td><a href="https://github.com/zhwangart/hexo-theme-ocean">Ocean</a></td></tr><tr><td>4</td><td><a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a></td></tr><tr><td>5</td><td><a href="https://github.com/saicaca/hexo-theme-vivia">Vivia</a></td></tr><tr><td>6</td><td><a href="https://github.com/HyunSeob/hexo-theme-overdose">Overdose</a></td></tr><tr><td>7</td><td><a href="https://github.com/iTimeTraveler/hexo-theme-hiero">Hiero</a></td></tr><tr><td>8</td><td><a href="https://github.com/iTimeTraveler/hexo-theme-hipaper">Hipaper</a></td></tr></tbody></table><hr><p>參考資料：</p><ul><li><a href="https://www.youtube.com/watch?v=erKYtw4Rfhk&ab_channel=CodeSheep%E7%A8%8B%E5%BA%8F%E7%BE%8A">手把手教你从 0 开始搭建自己的个人博客</a></li><li><a href="https://www.zhihu.com/tardis/zm/art/103348449?source_id=1003">测试了 25 款 Markdown 编辑器，推荐 3 个最好用的！</a></li><li><a href="https://viiisit.com/posts/github-pages-with-custom-domain/">Custom Domain - 從零到有，成功建置 viiisit.com!</a>，viii</li><li><a href="https://www.youtube.com/watch?v=PsXWbI2Mqu0&list=PLX5Mjj7M-ojmiOJQDUNNyPRY1xlajVEYD&index=1&ab_channel=%E5%91%A8%E4%B8%89Tech">Hexo 影片教學系列</a>，周三 Tech</li><li><a href="https://orandigo.github.io/blog/2020/03/01/20200301-hexo/">Hexo</a>，前端筆記</li><li><a href="https://www.youtube.com/watch?v=7YDuIhDR16w&list=PLIN0r_kqXu-7_S4sg1gDkzdkCLzWXoPBf&ab_channel=%E6%88%91%E4%B8%8D%E6%98%AF%E5%92%95%E5%92%95%E9%B8%BD">文章管理輔助工具比較</a>，我不是咕咕鴿</li><li><a href="https://markdown.com.cn/basic-syntax/emphasis.html">Markdown 官方教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 個人部落格架設 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
            <tag> github-pages </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RoR | rails 專案的建立 &amp; 設置</title>
      <link href="/posts/ruby-on-rails-new-project/"/>
      <url>/posts/ruby-on-rails-new-project/</url>
      
        <content type="html"><![CDATA[<p>rails 專案中，有幾個必須認識的檔案名稱，以及需要了解的用途。</p><ul><li>config 設定檔</li><li>lib 函式庫</li><li>app 執行檔<ul><li>controllers</li><li>module</li><li>views</li><li>assets 附件<ul><li>image</li><li>stylesheet<ul><li>css</li></ul></li></ul></li></ul></li></ul><h2 id="新建-rails-專案"><a href="#新建-rails-專案" class="headerlink" title="新建 rails 專案"></a>新建 rails 專案</h2><h3 id="選擇-JS-打包工具-CSS-框架"><a href="#選擇-JS-打包工具-CSS-框架" class="headerlink" title="選擇 JS 打包工具 &amp; CSS 框架"></a>選擇 JS 打包工具 &amp; CSS 框架</h3><p>在新建專案時，建議以 esbuild 作為 js 打包工具，並且以 tailwind 作為 css 框架。</p><ul><li>Rails 專案建置指令： <code>$ rails new project-name -j esbuild -c tailwind</code><br>(rails 預設的 js 打包工具為 importmap)</li></ul><h3 id="安裝-gem-bundle-rackup"><a href="#安裝-gem-bundle-rackup" class="headerlink" title="安裝 gem &amp; bundle &amp; rackup"></a>安裝 gem &amp; bundle &amp; rackup</h3><p>在前端開發中，可以使用 node http 開啟伺服器。而在 rails 專案中，可以使用 rackup 開啟伺服器。rackup 的伺服器運作時，將會回傳 request 的執行結果。結果的資料型態分別為 int 、 hash 以及 array，分別記錄 status、header 以及回應結果的 html。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用 node http 建立伺服器</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line">http</span><br><span class="line">  .<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">listem</span>(<span class="number">8888</span>);</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建立並在 `config.ru`檔案中放入以下程式碼，而後以 `rackup` 建立伺服器。</span></span><br><span class="line">run <span class="keyword">do</span> |<span class="params">env</span>|</span><br><span class="line">    [<span class="number">200</span>, &#123;&#125;, [<span class="string">&quot;Hello Ruby&quot;</span>]]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ol><li>安裝 bumdle<ol><li><code>$ sudo chmod +x *.bundle</code></li><li><code>$ sudo ./*.bundle</code></li></ol></li><li>安裝 grm：<code>$ gem install</code></li><li>以 bundle 安裝 gem 套件<br>(如果 Gemfile.lock 不存在，將在 <code>$ bundle</code> 的所有指令執行時，自動安裝。)<ol><li>根據 Gemfile 內容，安裝設定的套件：<code>$ bundle install</code><br>(<code>$ bundle install</code>的運作底層邏輯，仍為 <code>$ gem install</code>)</li><li>根據指令指定的內容，將套件加入 Gemfile 的套件列表，並安裝：<code>$ bundle add</code></li><li>根據指令指定的內容，安裝套件：<code>$ bundle update 套件名稱</code></li></ol></li><li>安裝 rackup<ol><li>進入 rackup 官網，下載並安裝 rackup。</li><li>執行 <code>$ rackup</code>，確認 rackup 能夠順利運行。</li></ol></li></ol><blockquote><h4 id="什麼是伺服器-server-？-rackup-的用途？"><a href="#什麼是伺服器-server-？-rackup-的用途？" class="headerlink" title="什麼是伺服器(server)？ rackup 的用途？"></a>什麼是伺服器(server)？ rackup 的用途？</h4><p>伺服器是一種<a href="https://zh.wikipedia.org/zh-tw/%E8%AF%BB%E5%8F%96-%E6%B1%82%E5%80%BC-%E8%BE%93%E5%87%BA%E5%BE%AA%E7%8E%AF">無限循環</a>的軟體，而不是特定種類的硬體計算機，只是軟體必定乘載於硬體。軟體工程師的工作就是將程式碼設置於 server，提供使用者觀看與使用。而常見的 server 軟體有 Apache 以及 nginx，優點是在靜態頁面的傳輸上效能高，缺點是無法識別後端程式碼，因此在傳輸時會連同後端原始碼一起傳輸，可能造成機密外洩。為了解決這個問題，需要另外安裝 mod (modular) 套件，會將原始碼轉譯為 html 後再供使用者下載。 rackup 就是 rails 預設的 mod，可以防止開發的原始碼外洩。</p></blockquote><h3 id="設置-Gemfile-Gemfile-lock"><a href="#設置-Gemfile-Gemfile-lock" class="headerlink" title="設置 Gemfile &amp; Gemfile.lock"></a>設置 Gemfile &amp; Gemfile.lock</h3><p>在 rails 專案中，可以在最外層找到名為 Gemfile 以及 Gemfile.lock 的兩個檔案。Gemfile 是 gem 套件安裝時的依據，就像 node.js 專案中的 package.json，並且將套件分為運行用套件 (runtime)、開發用套件 (development) 和測試用套件 (test) 。在打包專案時，可以依照用途打包最少的資料，藉此提升效能。而 Gemfile.lock 則是記錄套件相依性的依據，解決開源軟體之間常見的版本衝突。藉由 Gemfile.lock 中所記錄的相依性資訊，可以限制版本自動更新的範圍。</p><blockquote><h4 id="版本常見命名規則說明"><a href="#版本常見命名規則說明" class="headerlink" title="版本常見命名規則說明"></a>版本常見命名規則說明</h4><p>在 Gemfile 以及 Gemfile.lock 中，如果沒有指定版本，將預設安裝最新版。但每個版本差異不定，可以依據命名方式了解大致的軟體更新狀況。語意化版本號可以細分為主板號、次版號以及修訂號，分別在重大更新、有新功能以及部分除錯時提升。</p><p><img src="https://miro.medium.com/v2/resize:fit:1100/format:webp/1*S0S5Qv9AK3mc1M3Vq39nPQ.jpeg"></p><ul><li><code>~&gt; 3.1.7</code>：高於 3.1.7，低於 3.2.0 (更新到最新的 patch)</li><li><code>&gt; 3.1.7</code>：高於 3.1.7 (等於最新版)</li><li><code>3.1.7</code>：限定 3.1.7 版本</li><li>RC (Release Candidate)：候選版本，近完成品、幾乎不會改動。</li><li>Beta：公測版，只有部分的測試者能夠使用，並且後續可能有重大更新。</li></ul></blockquote><h2 id="MVC-架構專案雛形設置"><a href="#MVC-架構專案雛形設置" class="headerlink" title="MVC 架構專案雛形設置"></a>MVC 架構專案雛形設置</h2><p>Rails 專案的運作方式採用 MVC 架構，專案頁面建立的簡易步驟如下：</p><p><img src="https://media.discordapp.net/attachments/1116009887550423102/1175084693444636743/image.png?ex=6569f1e6&is=65577ce6&hm=91ffc183e99acc3c0cde4336d11ab8f54dc4f0454e562074b5dcea755c36bf81&=&width=1232&height=656"></p><ol><li>新增路由<ol><li>在 routes.rb 中，新增路由。<ul><li>建立根目錄：<code>root#index</code></li><li>建立頁面：<code>get &#39;page-name&#39;,to: &#39;pages#page-name</code><br>(<code>page-name</code> 即網頁路徑，<code>pages#page-name</code> 則是將對的 view html 頁面路徑)</li></ul></li></ol></li><li>建立 controller<ol><li>建立指定系統的 controller：<code>$ rails g controller pages</code><br>(<code>$ rails g</code> 是 <code>$ rails generate</code> 的縮寫)</li><li>根據設定的網頁路徑，新增 action <code>def about end</code> 在 <code>class PagesController &lt; ApplicationController ... end</code> 中。<br>(如果路徑設定與 view 的檔案名稱相同，可以省略。但不建議省略，因為可能導致識別困難)</li></ol></li><li>建立 view (頁面)<ol><li>在 views 資料夾中的 <code>pages</code> 建立名為 <code>page-name.html.erb</code> 的檔案。</li></ol></li><li>確認建立成果，開啟伺服器：<code>$ rails s</code></li></ol><h3 id="過程除錯"><a href="#過程除錯" class="headerlink" title="過程除錯"></a>過程除錯</h3><p>設置專案的過程中，有以下 5 種可能的錯誤提示，請試著根據錯誤提示回推除錯方法。</p><ol><li>❓ node.js 未安裝、yarn 未安裝，或是 yarn 安裝錯誤：<br>✅ 解決方法請看上一篇「RoR | 用 RVM 安裝 Ruby，用 Gem 安裝 Rails」。<br><img src="https://cdn.discordapp.com/attachments/1116009887550423102/1174613873437986836/image.png?ex=65683b6a&is=6555c66a&hm=8646251eebb9b72624fc28d352f496c6d3d7b407a2a8052608e1fe0ff04018e9&"></li><li>❓ 在 routes.rb 中，未建立路由，或是路徑錯誤：<br>✅ 在 routes.rb 中，建立路由 <code>get &#39;page-name&#39;,to: &#39;pages#page-name</code>，或是建立跟目錄 <code>root#index</code>。<br><img src="https://cdn.discordapp.com/attachments/1116009887550423102/1174610016213413948/image.png?ex=656837d3&is=6555c2d3&hm=94003aa80eac4dd37010a78c6764a4d70b584a853c89ca64ce91d93cbba5799e&"></li><li>❓ 未建立與 routes.rb 中相對應的 controller：<br>✅ 輸入指令，建立 controller：<code>$ rails g controller pages</code><br><img src="https://cdn.discordapp.com/attachments/1116009887550423102/1174611544286449684/image.png?ex=6568393f&is=6555c43f&hm=eb8b9bc3401800ef503b8aebafe1cb26965f0eff7b947960f970e713a937ac07&"></li><li>❓ 在 controller 中，未建立 action：<br>✅ 在 controller 中，建立 action <code>def about end</code> 在 <code>class PagesController &lt; ApplicationController ... end</code> 中。<br><img src="https://cdn.discordapp.com/attachments/1116009887550423102/1174609924513337364/image.png?ex=656837bd&is=6555c2bd&hm=63c151ad2525149463292d470e634f1a0e4905c4dccd8fcee008a8da57818fdb&"></li><li>❓ 未建立 view：<br>✅ 在 views 資料夾中的 <code>pages</code> 建立名為 <code>page-name.html.erb</code> 的檔案。<br><img src="https://cdn.discordapp.com/attachments/1116009887550423102/1174610702237958184/image.png?ex=65683876&is=6555c376&hm=7aa87772814c8a64792db85b1ea9ece9fde07ecef040179ec181003350e1e546&"></li></ol><hr><p>參考資料：</p><ul><li><a href="https://railsbook.tw/chapters/09-using-gems">使用套件（Gem）讓開發更有效率</a>，為你自己學 Ruby on Rails</li><li><a href="https://kaochenlong.com/2016/04/29/where-are-the-installed-gems/">gem install 之後，那些 gem 安裝到哪裡去了?</a>，高見龍</li><li><a href="https://medium.com/lynns-dev-blog/rails-%E6%96%B0%E6%89%8B%E6%9D%91-bundle-install-%E5%92%8C-gem-install-%E7%9A%84%E5%B7%AE%E5%88%A5-bd416ee8b2eb">Rails — bundle install 和 gem install 的差別</a>，涓</li><li><a href="https://railsbook.tw/extra/rack">為你自己學 Ruby on Rails</a></li><li><a href="https://www.jianshu.com/p/eaaa6d71f8c6">pod 使用指定版本</a>Gemfile.lock 版本的指定參考，AnnieAri</li><li><a href="https://semver.org/lang/zh-TW/">語意化版本 2.0.0</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ruby </tag>
            
            <tag> rails </tag>
            
            <tag> mvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RoR | 用 RVM 安裝 Ruby，用 Gem 安裝 Rails</title>
      <link href="/posts/ruby-on-rails-install-rvm/"/>
      <url>/posts/ruby-on-rails-install-rvm/</url>
      
        <content type="html"><![CDATA[<p><img src="https://media.discordapp.net/attachments/1116009887550423102/1174191569235099728/image.png?ex=6566b21d&is=65543d1d&hm=7032d13536b292a619e79e146135fda756138e61320f2e91a8234dcac3635e8f&=&width=1086&height=656"></p><p>RVM 是一個針對 Ruby 的版本管理工具，而 Gem 是 Ruby 套件的管理工具。就像 NVM 之於 Node.js，npm 之於 Node.js。利用這兩個工具，可以更加快速地完成 Ruby on rails (RoR) 的執行與開發環境建立。</p><h2 id="使用-macOS-順利安裝"><a href="#使用-macOS-順利安裝" class="headerlink" title="使用 macOS 順利安裝"></a>使用 macOS 順利安裝</h2><p>使用蘋果電腦進行 RoR 的環境建置時，相比 Windows Subsystem Linux (WSL) 要簡單許多。而如果你像我一樣，使用的是 WSL 環境使用 RoR，就需要了解下一章如何處理子系統的細節。</p><h3 id="安裝-RVM"><a href="#安裝-RVM" class="headerlink" title="安裝 RVM"></a>安裝 RVM</h3><p>Ruby Version Manager (RVM) 是一個 Ruby 版本管理工具，能夠在管理一個環境下安裝的多個不同版本的 Ruby。操作方式簡單，只需要依照官網運作三行指令即可。</p><ol><li>安裝 GPG 金鑰：<code>gpg2 --keyserver keyserver.ubuntu.com --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB</code></li><li>安裝 RVM：<code>\curl -sSL https://get.rvm.io | bash -s stable</code></li></ol><h3 id="安裝-Ruby"><a href="#安裝-Ruby" class="headerlink" title="安裝 Ruby"></a>安裝 Ruby</h3><ol><li>查看已安裝的 Ruby 版本： <code>rvm list</code></li><li>查看已知(可安裝)的 Ruby 版本： <code>rvm list known</code><br>(查看可安裝的最新版本)</li><li>安裝 Ruby：<code>rvm install 3.0.0</code><br>(在 install 後方的數字填入版本號)<ol><li>輸入 WSL 密碼</li><li>檢查安裝版本：<code>ruby -v</code></li></ol></li></ol><blockquote><p>如果無法順利安裝 Ruby，可以試試 <code>ruby reinstall 3.2.2</code>，看看能不能順利安裝。</p></blockquote><h3 id="安裝-Rails"><a href="#安裝-Rails" class="headerlink" title="安裝 Rails"></a>安裝 Rails</h3><p><a href="https://rubygems.org/?locale=zh-TW">RubyGems</a>類似於 node.js 中的 npm 的套件管理工具。</p><ol><li>安裝 rails：<code>gem install rails</code><ol><li>也可以指定 rails 的安裝版本：<code>gem install rails -v 5.2.3</code></li><li>也可以指定安裝 rails 的先行版：<code>gem install rails --pre</code></li></ol></li><li>檢查 rails 的安裝版本，了解是否安裝成功：<code>rails -v</code></li><li>建立專案<ol><li>指定專案建立的檔案路徑：<code>cd /mnt/c/...</code></li><li>建立 rails 專案：<code>rails new hello-rails</code><br>(在 rails new 後方填上新生成的專案名稱)</li><li>查看檔案：<code>ls -al</code></li><li>進入專案路徑：<code>cd hello-rails/</code></li><li>查看 rails 專案 server：<code>rails s</code><br>(完整指令為：<code>rails server</code>)</li></ol></li></ol><h2 id="處理-WSL-環境問題"><a href="#處理-WSL-環境問題" class="headerlink" title="處理 WSL 環境問題"></a>處理 WSL 環境問題</h2><p>使用 WSL 環境時，必須注意子系統中是否安裝 Node.js 以及 npm。如果 npm 的版本過舊，就需要安裝 nvm 用以將 npm 更新到最新版本。另外，建立 rails 專案時，必須使用 esbuild 作為 js 打包工具，才能順利運作 rails 的伺服器。</p><ul><li>Rails 專案建置指令： <code>rails new project-name -j esbuild -c tailwind</code><br>(rails 預設的 js 打包工具為 importmap)</li></ul><h3 id="檢查及安裝-Node-js-nvm-npm-yarn"><a href="#檢查及安裝-Node-js-nvm-npm-yarn" class="headerlink" title="檢查及安裝 Node.js &amp; nvm &amp; npm &amp; yarn"></a>檢查及安裝 Node.js &amp; nvm &amp; npm &amp; yarn</h3><p>首先，檢查環境中目前的軟體版本，包刮 Node.js、nvm、npm 和 yarn。傳新安裝完成後，也要用 <code>-v</code> 或 <code>--version</code> 查看目前環境中的版本，重新檢查是否安裝成功。</p><ul><li><p>檢查環境中既有版本</p><ol><li><code>node -v</code></li><li><code>npm -v</code></li><li><code>nvm -v</code><ol><li><code>nvm list</code></li></ol></li><li><code>yarn -v</code></li></ol></li><li><p>安裝缺失軟體 &amp; 更新軟體</p><ol><li>從 <a href="https://nodejs.org/en/">Node.js 官網</a> 下載 node.js<br>(npm 會跟著 node.js 一起被安裝)</li><li>從 <a href="https://github.com/nvm-sh/nvm">nvm</a> 下載並安裝 nvm</li><li>用 nvm 更新 npm 版本： <code>nvm install 16.20.0</code></li><li>用 npm 安裝 yarn： <code>npm install --global yarn</code></li></ol></li></ul><h3 id="rails-專案的建置與刪除"><a href="#rails-專案的建置與刪除" class="headerlink" title="rails 專案的建置與刪除"></a>rails 專案的建置與刪除</h3><p>在處理 RoR 環境時，因為需要重複建立專案以確認環境是否安全，所以會重複建立專案。過程中，如果將既有專案刪除，並且建立同名檔案，可能會出現錯誤並且建立失敗。如果藉由 Windows 檔案管理直接刪除檔案，可能因為快取殘留，而無法建立同名專案。但如果是在終端機以 <code>rm -r project-name</code> 刪除專案，將不會出現因此在建立專案時出現錯誤。</p><ul><li>確認 application 系列檔案安裝成功<ol><li>application.js</li><li>application.tailwind.css</li></ol></li></ul><hr><p>參考資料：</p><ul><li><a href="https://rvm.io/">RVM</a></li><li><a href="https://medium.com/lynns-dev-blog/rails-%E6%96%B0%E6%89%8B%E6%9D%91-bundle-install-%E5%92%8C-gem-install-%E7%9A%84%E5%B7%AE%E5%88%A5-bd416ee8b2eb">Rails — bundle install 和 gem install 的差別</a></li><li><a href="https://github.com/rubocop/ruby-style-guide">Ruby Style Guide</a></li><li><a href="https://replit.com/">replit</a></li><li><a href="https://yarn.bootcss.com/docs/install/index.html#windows-stable">yarn 的安裝</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ruby </tag>
            
            <tag> rails </tag>
            
            <tag> linux </tag>
            
            <tag> wsl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMX | 建立 WSL (Windows subsystem Linux)</title>
      <link href="/posts/vmx-wsl/"/>
      <url>/posts/vmx-wsl/</url>
      
        <content type="html"><![CDATA[<p><img src="https://media.discordapp.net/attachments/1116009887550423102/1174309250131042364/image.png?ex=65671fb6&is=6554aab6&hm=5baf77d5e0c3a15b8b04743d0567c292ddf3484b1b27961251f0e79afd65b73b&=&width=1440&height=384"></p><p>Ubuntu 和 macOS 都是 Linux 作業系統的一種，比起 Windows，才能順利運作 Ruby on Rails。至於其他還有哪些差異，可以再多多研究。</p><blockquote><h2 id="subsystem-子系統-和-VM-虛擬機器平台-的差異？"><a href="#subsystem-子系統-和-VM-虛擬機器平台-的差異？" class="headerlink" title="subsystem (子系統) 和 VM (虛擬機器平台) 的差異？"></a>subsystem (子系統) 和 VM (虛擬機器平台) 的差異？</h2><p>子系統是在 Windows 作業系統中運行的子系統，可以利用終端機進入其他作業系統的執行環境。而虛擬機器平台是獨立於 Windows 的作業系統，無法快速切換程式碼的運作環境，但是當作另外的儲存庫非常實用。如果想要將資料連同作業環境複製給他人，就可以藉由複製虛擬機器平台實現。<br>不過現在這個用途，似乎用 Docker 技術可以更有效率的管理資料。</p></blockquote><h2 id="開啟-VMX-Windows-虛擬化設定"><a href="#開啟-VMX-Windows-虛擬化設定" class="headerlink" title="開啟 VMX (Windows 虛擬化設定)"></a>開啟 VMX (Windows 虛擬化設定)</h2><p>要開啟 VMX (Windows 虛擬化設定)，只需要兩個步驟。一個是啟用 BIOS 的 Intel virtualization，另一個是安裝 Windows 的虛擬機器平台，準備好安裝 WSL 的環境。</p><h3 id="開啟-BIOS-的-VMX-功能"><a href="#開啟-BIOS-的-VMX-功能" class="headerlink" title="開啟 BIOS 的 VMX 功能"></a>開啟 BIOS 的 VMX 功能</h3><p>其實，BIOS 的 Intel virtualization 是預設開啟的，如果過去沒有自行修改設定，可以跳過這個步驟。</p><ul><li><p>進入 BIOS (或 UEFI) 共用程式</p><ol><li>儲存並關閉所有應用程式。</li><li>設定 &gt; 進階啟動 &gt; 立即重新啟動</li><li>盡如重新啟動的藍色畫面<ol><li>疑難排解 &gt; 進階選項 &gt; UEFI 韌體設定</li><li>重新啟動以變更 UEFI 韌體設定</li></ol></li></ol></li><li><p>開啟 BIOS 的 VMX 功能</p><ol><li><code>F7</code> 切換到高階模式</li><li>advanced &gt; Intel virtualization &gt; Enabled</li></ol></li></ul><h3 id="開啟-Windows-的虛擬機器平台"><a href="#開啟-Windows-的虛擬機器平台" class="headerlink" title="開啟 Windows 的虛擬機器平台"></a>開啟 Windows 的虛擬機器平台</h3><p>在 Windows 系統的搜尋欄位查找，就可以找到這個應用程式，進行系統設定。</p><ul><li>開啟 Windows 的虛擬機器平台<ol><li>開啟「開啟或關閉 Windows 功能」</li><li>勾選「Windows 子系統 Linux 版」以及「虛擬機器平台」 &gt; 確定 &gt; 立即重新啟動<br>(也可以用系統管理員開啟 PowerShell，並且輸入 <code>Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</code> 以開啟「Windows 子系統 Linux 版」。但是我不知道開啟「虛擬機器平台」的指令。)</li></ol></li></ul><h2 id="安裝-Ubuntu"><a href="#安裝-Ubuntu" class="headerlink" title="安裝 Ubuntu"></a>安裝 Ubuntu</h2><ol><li>開啟 Windows store</li><li>搜尋並安裝 Ubuntu</li><li>❗ 直接開啟 Ubuntu 的終端機<br>(不要用 Windows 的 Terminal &gt; 切換 Ubuntu)</li><li>設定使用者名稱</li><li>設定使用者密碼<br>(為了安全起見，密碼不會顯示，字還是有打喔！)</li></ol><blockquote><h3 id="使用-WSL"><a href="#使用-WSL" class="headerlink" title="使用 WSL"></a>使用 WSL</h3><p>Ubuntu 安裝完成後，子系統並非獨立於 Windows 的資料儲存空間，而是藉由「鏡射」的方式，查看 Windows 系統中的資料儲存。開啟 Ubuntu 之後，檔案路徑中的 <code>mut/c</code> 就是鏡射到 Windows 系統中的 <code>C:</code>。</p></blockquote><hr><p>參考資料：</p><ul><li><a href="https://support.microsoft.com/zh-tw/windows/%E5%9C%A8-windows-11-%E9%9B%BB%E8%85%A6%E4%B8%8A%E5%95%9F%E7%94%A8%E8%99%9B%E6%93%AC%E5%8C%96-c5578302-6e43-4b4b-a449-8ced115f58e1">在 Windows 11 電腦上啟用虛擬化</a></li><li><a href="https://learn.microsoft.com/zh-tw/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package">舊版 WSL 的手動安裝步驟</a></li><li>五倍紅寶石學院 ASTRO Camp 線上課程</li><li><a href="https://aws.amazon.com/tw/compare/the-difference-between-docker-vm/">Docker 與 VM 之間有何區別？</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> wsl </tag>
            
            <tag> vm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML | 標籤結構 &amp; 切版設計</title>
      <link href="/posts/html-structure/"/>
      <url>/posts/html-structure/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.discordapp.com/attachments/1116009887550423102/1173774265514991647/image.png?ex=65652d78&is=6552b878&hm=e797c910c2ab1375725c8df33c26f76a470d105854ba4c7fb2cdb691f8c1b633&"></p><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/HTML">HTML</a> （HyperText Markup Language，超文本標記語言）是前端三大語言之一，是網頁內容的主體。它的語意結構將關係到 SEO 搜尋結果，是改善「搜尋引擎最佳化」的關鍵。同時，也是設計「<a href="https://accessibility.moda.gov.tw/Download/Detail/1419?Category=28">無障礙網站</a>」時需要精心安排的重點。透過 <a href="https://pagespeed.web.dev/">PageSpeed Insight</a> 可以了解特定網站的優劣，檢測「效能、無障礙功能、最佳做法、搜尋引擎最佳化」四個指標，更可以查找<a href="https://developers.google.com/speed/docs/insights/v5/about?hl=zh-tw">文件</a>了解改善方向。</p><h2 id="建構-HTML-的步驟"><a href="#建構-HTML-的步驟" class="headerlink" title="建構 HTML 的步驟"></a>建構 HTML 的步驟</h2><p>為了提升 HTML 的建構效率，建議將 HTML 結構模組化，避免檢查結構時可能的混亂。首先，設定容器時，建議將每個章節分為 header 、 .content 以及 footer。(如果沒有相關內容，可以省略)其次，才依照功能及內容，選擇相符的標籤，填入先前建立的容器中。</p><ol><li>設定容器<ol><li>語意結構標籤</li><li>無語意結構標籤</li></ol></li><li>設定功能與內容<ol><li>功能</li><li>內容</li></ol></li></ol><h3 id="1-設定容器"><a href="#1-設定容器" class="headerlink" title="1. 設定容器"></a>1. 設定容器</h3><p>結構標籤沒有特殊功能，主要是將有關連的內容群組化，並且幫助 SEO 分辨內容類別。</p><ul><li>語意容器<ul><li>結構<ul><li>header 頂端，大多放作者名稱、LOGO、搜尋欄</li><li>footer 末端，大多放作者、版權、文件相關連結</li></ul></li><li>內容<ul><li>main 主要，沒有和其他頁面重複的內容</li><li>aside 另外，和主要內容無關 &#x2F; 間接相關的內容</li><li>nav: navigation 選單，設置多個連結，大多放側邊欄、頁面導覽、麵包屑</li></ul></li><li>內容類型<ul><li>article 文章，獨立結構的 post 或新聞文章</li><li>section 章節，通用的分段結構，多用在搜尋結果、地圖顯示、控制項等。</li></ul></li></ul></li><li>無語意容器<ul><li>div: division，群組標籤用的工具</li><li>span，用於內文重要性的視覺化外觀控制</li></ul></li></ul><h3 id="2-設定功能與內容"><a href="#2-設定功能與內容" class="headerlink" title="2. 設定功能與內容"></a>2. 設定功能與內容</h3><p>除了幫助 SEO 更好的了解網頁內容，許多標籤也有特殊的功能。細節繁多，不及備載，就帶著耐心查看文件吧！</p><ul><li>功能<ul><li>連結<ul><li>a</li></ul></li><li>表單<ul><li>form</li></ul></li></ul></li><li>內容<ul><li>媒體<ul><li>img</li><li>video</li><li>radio</li></ul></li><li>文字<ul><li>標題<ul><li>title</li><li>h1 ~ h6</li></ul></li><li>內文<ul><li>p 段落</li><li>blockquote 引言</li><li>figure 獨立內容，像是雜誌圖片搭配文字說明<ul><li>figcaption 獨立內容說明</li></ul></li></ul></li><li>重要性<ul><li>strong (b)</li><li>em (i)</li><li>del: delete 刪除線 (s) ，常用在特價</li><li>ins: inserted 更新</li></ul></li></ul></li><li>表格 (table)<ul><li>結構<ul><li>caption 標題，表格外說明標題</li><li>thead</li><li>tbody</li><li>tfoot</li></ul></li><li>內容<ul><li>tr: table row，就算沒分欄，裡面也必須有 <code>&lt;td&gt;</code></li><li>td: table definition</li><li>th: table heading</li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> layout </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS | JEST 測試驅動開發 (TDD)</title>
      <link href="/posts/js-TDD/"/>
      <url>/posts/js-TDD/</url>
      
        <content type="html"><![CDATA[<p>TDD (Test-Driven Development) 測試驅動開發，是一種以規格測試起稿，再藉此完善功能的開發方式。老師教學使用的是 npm 套件 jest，不知道還有沒有其他類似功能的套件呢？</p><h2 id="理論"><a href="#理論" class="headerlink" title="理論"></a>理論</h2><ul><li><p>為什麼要先寫測試？</p><ul><li>依據測試規格開發，可避免開發過程中的疏漏。</li><li>撰寫程式碼的過程中，開發人員將保有信心。</li><li>階段性開發，清楚知道錯誤範圍。</li><li>確保重購程式碼的過程順利，在外部條件不改變的情況下，調整內部程式碼。</li></ul></li><li><p>3 A 開發步驟：</p><ul><li>Arrange 設置</li><li>Act 執行</li><li>Assert 斷言</li></ul></li><li><p>❗ 每項測試盡量精簡，確保最小測試範圍。</p></li></ul><h2 id="測試設計"><a href="#測試設計" class="headerlink" title="測試設計"></a>測試設計</h2><p>TDD 的過程分為兩個部分，一個是撰寫測試用的程式碼，一個是撰寫真正的專案功能開發所需要的程式碼。撰寫測試用程式碼時，只需要根據人類語言的邏輯依序寫出美行程式碼，而先不用在意程式是能順利運作。(等到專案功能實作時再修正)</p><ul><li>設置物件 &#x2F; 函數 &#x2F; 類別<ul><li><ol><li>寫出結果判斷<br>這是 JEST 獨有的語法，將比較結果是否符合預期。<br><code>expect(account.balance).toBe(7);</code><br><code>expect(動作).toBe(理想結果)</code></li></ol></li><li><ol start="2"><li>寫出參數判斷<br>為了方便檢視引數導致的變化，建議也將引數作為檢查對象。<br><code>expect(amount).toBe(3);</code></li></ol></li></ul></li></ul><blockquote><h3 id="JEST-的安裝與使用"><a href="#JEST-的安裝與使用" class="headerlink" title="JEST 的安裝與使用"></a>JEST 的安裝與使用</h3><p>使用 npm 安裝後，將 package.json 檔案中的 script:{test: …} 的內容改為「jest」並存檔，之後就可以執行 <code>npm run test</code> 運行 jest 的測試程序了。所有小步驟，全都寫在下面囉！</p><ol start="0"><li>記得所在專案必須先初始化為 npm 專案 <code>npm init -y</code> &gt; <code>-y</code> 表示同意所有預設選項。</li><li>安裝套件 <code>npm install --save-dev jest</code><br>可以縮寫為 <code>npm i -d</code>，表示安裝 jest，並且記錄到 package.json 檔案中的 develope 開發軟體清單中。</li><li>查看套件是否有順利安裝<br>查看 package &#x2F; dependencies 的屬性是否有安裝的套件。</li><li>修改 script 指令</li></ol><ul><li><ol><li>修改 <code>test</code> 指令為 <code>jest</code> &gt; <code>scripts: &#123; test: &quot;jest&quot;&#125;</code> 。</li></ol></li><li><ol start="2"><li>❗ 存檔 ❗</li></ol></li></ul><ol start="4"><li>新增測試檔案的專屬資料夾 <code>__tests__</code><br>如果沒有建立此資料夾，將無法順利運作。請務必記得在 tests 結尾加「s」❗</li><li>新增測試用程序的檔案 <code>xxx_spec.js</code><br>spec 是 specification 的縮寫，就是「規格」的意思。</li></ol></blockquote><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>根據 3A 的測試理論，先從物件的宣告開始，再撰寫程式運作的順序及過程。</p><ol><li>宣告</li></ol><ul><li>const &#x2F; let &#x2F; var</li><li>class</li><li>function</li></ul><ol start="2"><li>運作 function()</li></ol><blockquote><h3 id="主管帶領新人測試開發"><a href="#主管帶領新人測試開發" class="headerlink" title="主管帶領新人測試開發"></a>主管帶領新人測試開發</h3><p>未來若有幸擔任主管職位，訓練新人進行測試開發時，可以先教導新人實作，而後再教導新人撰寫規格書。因為主管對於實務上需要檢查的案例有較豐富的經驗，撰寫規格書時更能確保品質，也具有將客戶需求轉換為程式規格的能力。</p><ul><li><ol><li>主管寫規格，新人實作</li></ol></li><li><ol start="2"><li>新人寫規格，主管實作</li></ol></li></ul></blockquote><h2 id="實作歷程範例"><a href="#實作歷程範例" class="headerlink" title="實作歷程範例"></a>實作歷程範例</h2><p>以銀行帳戶的建立，以及基本功能開發為例，包含存錢和領錢的功能。</p><ul><li>建構基本架構</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BankAccount</span> &#123;</span><br><span class="line">  <span class="title function_">deposit</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">balance</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;可以存錢&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 3A, Arrange, Act, Assert</span></span><br><span class="line">  <span class="comment">// 1. 生帳號，開戶 10</span></span><br><span class="line">  <span class="keyword">const</span> account = <span class="keyword">new</span> <span class="title class_">BankAccount</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="comment">// 2. 存 10 元</span></span><br><span class="line">  account.<span class="title function_">deposit</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="comment">// 3. 餘 20 元</span></span><br><span class="line">  <span class="title function_">expect</span>(account.<span class="property">balance</span>).<span class="title function_">toBe</span>(<span class="number">20</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>完整化</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BankAccount</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">amount</span> = amount;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">deposit</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">amount</span> += amount;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">balance</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">amount</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;可以存錢 20 元&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 3A, Arrange, Act, Assert</span></span><br><span class="line">  <span class="comment">// 1. 生帳號，開戶 10</span></span><br><span class="line">  <span class="keyword">const</span> account = <span class="keyword">new</span> <span class="title class_">BankAccount</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="comment">// 2. 存 20 元</span></span><br><span class="line">  account.<span class="title function_">deposit</span>(<span class="number">20</span>);</span><br><span class="line">  <span class="comment">// 3. 餘 30 元</span></span><br><span class="line">  <span class="title function_">expect</span>(account.<span class="property">balance</span>).<span class="title function_">toBe</span>(<span class="number">30</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>持續完整化，直到符合所有規格</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BankAccount</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">amount</span> = amount;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">deposit</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (amount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">amount</span> += amount;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">withdraw</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (amount &gt; <span class="number">0</span> &amp;&amp; amount &lt;= <span class="variable language_">this</span>.<span class="property">amount</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">amount</span> -= amount;</span><br><span class="line">      <span class="keyword">return</span> amount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">balance</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">amount</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;可以存 10 元&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> account = <span class="keyword">new</span> <span class="title class_">BankAccount</span>(<span class="number">10</span>);</span><br><span class="line">  account.<span class="title function_">deposit</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="title function_">expect</span>(account.<span class="property">balance</span>).<span class="title function_">toBe</span>(<span class="number">20</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;可以存 20 元&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> account = <span class="keyword">new</span> <span class="title class_">BankAccount</span>(<span class="number">10</span>);</span><br><span class="line">  account.<span class="title function_">deposit</span>(<span class="number">20</span>);</span><br><span class="line">  <span class="title function_">expect</span>(account.<span class="property">balance</span>).<span class="title function_">toBe</span>(<span class="number">30</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;不可以存 0 元或是小於 0 元的金額&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> account = <span class="keyword">new</span> <span class="title class_">BankAccount</span>(<span class="number">10</span>);</span><br><span class="line">  account.<span class="title function_">deposit</span>(-<span class="number">20</span>);</span><br><span class="line">  <span class="title function_">expect</span>(account.<span class="property">balance</span>).<span class="title function_">toBe</span>(<span class="number">10</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;可以領錢&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> account = <span class="keyword">new</span> <span class="title class_">BankAccount</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="keyword">const</span> amount = account.<span class="title function_">withdraw</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">expect</span>(amount).<span class="title function_">toBe</span>(<span class="number">3</span>);</span><br><span class="line">  <span class="title function_">expect</span>(account.<span class="property">balance</span>).<span class="title function_">toBe</span>(<span class="number">7</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;不能領 0 元或是小於 0 元的金額&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> account = <span class="keyword">new</span> <span class="title class_">BankAccount</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="keyword">const</span> amount = account.<span class="title function_">withdraw</span>(-<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">expect</span>(amount).<span class="title function_">toBe</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="title function_">expect</span>(account.<span class="property">balance</span>).<span class="title function_">toBe</span>(<span class="number">10</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;不能領超過本身餘額&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> account = <span class="keyword">new</span> <span class="title class_">BankAccount</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="keyword">const</span> amount = account.<span class="title function_">withdraw</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">expect</span>(amount).<span class="title function_">toBe</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="title function_">expect</span>(account.<span class="property">balance</span>).<span class="title function_">toBe</span>(<span class="number">10</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java-script </tag>
            
            <tag> testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>個人部落格架設-1 | GitHub Pages 建立個人網域</title>
      <link href="/posts/github-pages/"/>
      <url>/posts/github-pages/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在高見龍老師的建議下，開始以 Blog 記錄學習過程。<br>加強學習記憶，讓自己離成功更進一步。</p></blockquote><p>架設個人網站，能夠完全掌握個人流量，以及確保資料的保存。相較於一般的部落格平台，可以避免因為平台維護而損失流量，或是因為平台關閉而遺失資料。而且架設基本的個人「靜態網站」，只需要短短 10 分鐘。在靜態網站下，每個觀看者所看到的網頁都是相同的，是固定的網頁內容。不像「動態網站」，會因為使用者的差異，而呈現個人化的顯示資料，例如：推薦商品、廣告、未讀文章等等。</p><table><thead><tr><th>優點</th><th>缺點</th></tr></thead><tbody><tr><td>個人資料庫</td><td>必須學習 Git, GitHub</td></tr><tr><td>個人化版面設計</td><td>必須學習 HTML, CSS, JS</td></tr><tr><td>可以個人化網域<br>(需支付網域費用，513up&#x2F;年)</td><td>可能要花費個人網域費用</td></tr></tbody></table><h2 id="建立-user-name-github-io-的-repo"><a href="#建立-user-name-github-io-的-repo" class="headerlink" title="建立 user-name.github.io 的 repo"></a>建立 <code>user-name.github.io</code> 的 repo</h2><p>GitHub 是基於 Git 工具而設立的網路服務，其中 repo (repository) 就是儲存資料的倉庫。在一個 GitHub 中可以建立多個 repo，分別儲存不同的專案，並且依照個人習慣隨意命名。不過我們這次使用的是 GitHub 特別提供的 GitHub Pages 服務，在符合 GitHub Pages 的命名規則下才能順利運作。因此用於建立個人網域的專案名稱，必須是 <code>user-name.github.io</code>——以 GitHub 帳號起頭，並且以 <code>.github.io</code> 結尾。由此，個人網站的網域空間就已建立完畢，可以開始編寫個人網站的程式碼了。(個人網站網址即 <code>https://user-name.github.io</code>)</p><h2 id="影片完整教學"><a href="#影片完整教學" class="headerlink" title="影片完整教學"></a>影片完整教學</h2><p><a href="https://www.youtube.com/watch?v=erKYtw4Rfhk&ab_channel=CodeSheep%E7%A8%8B%E5%BA%8F%E7%BE%8A">手把手教你从 0 开始搭建自己的个人博客</a>，程序羊</p><iframe width="560" height="315" src="https://www.youtube.com/embed/erKYtw4Rfhk?si=HS8ni444vEcNHFnH&amp;start=886" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><hr><p>參考資料：</p><ul><li><a href="https://gitbook.tw/chapters/github/using-github-pages">使用 GitHub 免費製作個人網站</a>，高見龍</li><li><a href="https://medium.com/%E9%80%B2%E6%93%8A%E7%9A%84-git-git-git/%E5%BE%9E%E9%9B%B6%E9%96%8B%E5%A7%8B-%E7%94%A8github-pages-%E4%B8%8A%E5%82%B3%E9%9D%9C%E6%85%8B%E7%B6%B2%E7%AB%99-fa2ae83e6276">從零開始: 用 github pages 上傳靜態網站</a>，sexyoung</li><li><a href="https://pages.github.com/">GitHub Pages</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 個人部落格架設 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
            <tag> github-pages </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
