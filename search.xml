<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ruby-on-rails-helper</title>
      <link href="/posts/ruby-on-rails-helper/"/>
      <url>/posts/ruby-on-rails-helper/</url>
      
        <content type="html"><![CDATA[<p>在建立 controller 時，就會建立 helper。<br>用於 view 調用資料，而不用透過 controller。<br><strong>其實不管放哪個 controller 都可以全域取得，不需要放在用到的 view 類別。所有地方都可以調用。</strong><br>但還是建議照分類好好寫。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> <span class="title class_">UsersHelper</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">current_user</span></span><br><span class="line">        session[<span class="symbol">:uid</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>helper 的載入順序依照 a~z，如果同名就會被覆蓋。<br>沒有用到的 helper 其實都可以刪除，因為他們之間沒有繼承關係，但是依照公司規定比較重要。application_helper 建議留著，不知道擺哪裡的東西可以放。</p><h2 id="boolean-method"><a href="#boolean-method" class="headerlink" title="? boolean method"></a>? boolean method</h2><p>規範 ? 方法命名方式</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/posts/git/"/>
      <url>/posts/git/</url>
      
        <content type="html"><![CDATA[<h2 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h2><p>WIP<br>work in progress</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>個人部落格架設-3 | Hexo 圖片插入</title>
      <link href="/posts/hexo-embed-image-with-vscode-extension-paste-image/"/>
      <url>/posts/hexo-embed-image-with-vscode-extension-paste-image/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/hexo-embed-image-with-vscode-extension-paste-image/hexo-embed-image-with-vscode-extension-paste-image_2023-11-27-21-50-20.png"></p><p>如果你也和我一樣，使用 VScode 作為編輯 Hexo 文章的主要編輯工具，建議使用 <a href="https://marketplace.visualstudio.com/items?itemName=mushan.vscode-paste-image">Paste Image</a> 管理部落格圖片。</p><h2 id="插入圖片的-4-種方式"><a href="#插入圖片的-4-種方式" class="headerlink" title="插入圖片的 4 種方式"></a>插入圖片的 4 種方式</h2><p>在 Hexo 的<a href="https://hexo.io/zh-tw/docs/asset-folders.html">官方文件</a>中，插入圖片有三種方式。</p><ol><li>Global Asset Folder：在 <code>source</code> 資料夾中，建立 <code>image</code> 資料夾，其中的檔案都可以 markdown 的方式插入圖片：<code>![](/images/image.jpg)</code></li><li>Post Asset Folder：<ol><li>開啟 <code>_config.yml</code> 中的設定：<code>post_asset_folder: true</code></li><li>以後每次建立新的文章，都會建立一個專屬的附件資料夾，用以放入該文章所用到的所有圖片。</li><li>使用相對路徑引用指定圖片。</li></ol></li><li>Tag Plugins For Relative Path Referencing 使用變數<ol><li>指定圖片的插入樣式、圖片路徑以及圖片標題。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_path slug %&#125;</span><br><span class="line">&#123;% asset_img slug [title] %&#125;</span><br><span class="line">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li>Embedding an image using markdown：藉由 [hexo-renderer-marked] 套件，使用 markdown 語法插入圖片。(但是我沒有成功)</li></ol><h2 id="用-Paste-Image-快速插入圖片"><a href="#用-Paste-Image-快速插入圖片" class="headerlink" title="用 Paste Image 快速插入圖片"></a>用 Paste Image 快速插入圖片</h2><p>上方第 1 種方法，建立 <code>source/image</code> 資料夾，並且以 markdown 語法插入圖片，是我偏好的方式。只要貼上圖片，就在 <code>source/image</code> 中建立語文章同名的資料夾，並且以文章名稱為圖片命名再加上日期時間。為了更方便且快速的美化文章，我在 setting.json 中進行以下設定：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;pasteImage.path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;projectRoot&#125;/source/images/$&#123;currentFileNameWithoutExt&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pasteImage.basePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;projectRoot&#125;/source&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pasteImage.forceUnixStyleSeparator&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pasteImage.prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pasteImage.namePrefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;currentFileNameWithoutExt&#125;_&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pasteImage.insertPattern&quot;</span><span class="punctuation">:</span> <span class="string">&quot;![](/images/$&#123;currentFileNameWithoutExt&#125;/$&#123;imageFileName&#125;)&quot;</span></span><br></pre></td></tr></table></figure><hr><p>參考資料：</p><ul><li><a href="https://eddieeo.github.io/2015/09/06/c7c81ce1.html">Hexo 博客 Markdown 文章插入图片方法总结</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 個人部落格架設 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RoR | 用 form_with 快速建立 CRUD</title>
      <link href="/posts/ruby-on-rails-crud-form-with/"/>
      <url>/posts/ruby-on-rails-crud-form-with/</url>
      
        <content type="html"><![CDATA[<p>rails 設計哲學： 靠小幫手省事，但也可以手動糾正 &#x2F; 修改。</p><ul><li>DRY：Don’t Repeat Yourself 不重複</li><li>CoC：Convention over Configuration 慣例優於設定</li></ul><blockquote><h2 id="MVC-vs-三層式架構"><a href="#MVC-vs-三層式架構" class="headerlink" title="MVC vs 三層式架構"></a>MVC vs 三層式架構</h2></blockquote><blockquote><h2 id="把驗證放在-model-的好處"><a href="#把驗證放在-model-的好處" class="headerlink" title="把驗證放在 model 的好處"></a>把驗證放在 model 的好處</h2><p>update 和 new 可以共用驗證，不需要各自寫。</p></blockquote><blockquote><h2 id="刻意的巧合"><a href="#刻意的巧合" class="headerlink" title="刻意的巧合"></a>刻意的巧合</h2><p>因為將 new 和 create 中的實體變數取為同名，所以新增失敗時，在 create 頁面仍能取得擁有同名 key 的實體變數，並藉此塞入 new 的 view。</p></blockquote><blockquote><p>快速設置：<code>resources :products, only: [:index, :show]</code></p></blockquote><h2 id="公版設置：view-layout-application"><a href="#公版設置：view-layout-application" class="headerlink" title="公版設置：view/layout/application"></a>公版設置：<code>view/layout/application</code></h2><ol><li>另外開 html ，設定公版 <code>shared/_flash.erb</code> 隨意，放在 view 中。</li><li>然後在 <code>view/layout/application</code> 中引用：<code>&lt;%= render &#39;shared/flash&#39; if flash.any? %&gt;</code>，附檔名不用填寫。<ul><li>在 view 中 render view 時，會被視為 partial view ，將會以底線 <code>_</code> 在檔名做區隔。所以才必須加上底線。</li></ul></li></ol><p><code>render 404</code></p><h2 id="公版變數設置"><a href="#公版變數設置" class="headerlink" title="公版變數設置"></a>公版變數設置</h2><p>假如今天有多個區塊想要共用版面，但放置不同資料，例如卡片列表。在 render 時代入變數，作為公版內的數據依據。</p><p>引用的：加 <code>@</code><br><code>&lt;%= render &#39;form&#39;, product: @product %&gt;</code></p><p>被引用的：沒有 <code>@</code><br><code>&lt;%= form_with model: product, data: &#123;turbo: false&#125; do |form| %&gt;</code></p><h2 id="form-helper"><a href="#form-helper" class="headerlink" title="form helper"></a>form helper</h2><p>借用 view，帶入本來頁面的資料</p><ul><li>form helper (一種 view helper)<ol><li>form_with：建立表格，三個引數，用以更快速的生成欄位。(裡面要生成表單欄位，可以引用 model 的實體變數中的 key)<ol><li>預設 action (url)　指向自己，method post。<ul><li>因為在 new 頁面是用 new，所以是 new + post。如果是 <code>@resource = Resource.find(params[:id])</code> 就會猜成 update + patch。</li></ul></li><li>自動建立 token。(如果指定 method 為 get，就不會建立 token)<br>(因為要新增資料 post，才需要驗證站內操作，資料傳入資料庫。)</li></ol><ul><li>用以取代 form_for，</li><li>沒有給 model (nil)，會轉為 form_tag，後面接 url。而 url 沒有給值，預設送往當前網址。</li><li>用以整合 form_for &amp; form_tag。</li></ul></li><li>form_for(@)<br>必須搭配 model：<code>form_for(@product)</code><br>沒給 model (nil)，會錯誤。</li><li>form_tag<br>可以單純引用 url：<code>form_tag(url: &#39;bmi_calc&#39;)</code><br>url 沒有給值，預設送往當前網址。<br>沒有 model，不會收集成 parameters。但是也可以改成用 <code>scope: &#39;user&#39;</code> 包覆自訂的 parameters，卻不需要建立 model &amp; table。</li></ol></li></ul><p>可在 new 的當下新增預設值：<code>Product.new(amount: 100)</code>？因為會覆蓋 model 的預設值？html 中的 value。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= form_with <span class="symbol">model:</span> <span class="variable">@product</span>, <span class="symbol">data:</span> &#123;<span class="symbol">turbo:</span> <span class="literal">false</span>&#125; <span class="keyword">do</span> |<span class="params">form</span>| %&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;%= form.label <span class="symbol">:title</span>, <span class="string">&#x27;標題：&#x27;</span> %&gt;</span><br><span class="line">        &lt;%= form.text_field <span class="symbol">:title</span>, <span class="symbol">class:</span> <span class="string">&#x27;border-2-block&#x27;</span> %&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;%= form.label :description, &#x27;描述：&#x27; %&gt;</span></span><br><span class="line"><span class="regexp">        &lt;%= form.text_area :description, class: &#x27;border-2 border-block&#x27; %&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/div</span>&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;%= form.label <span class="symbol">:amount</span>, <span class="string">&#x27;價格：&#x27;</span> %&gt;</span><br><span class="line">        &lt;%= form.number_field <span class="symbol">:amount</span>, <span class="symbol">min:</span> <span class="number">0</span>, <span class="symbol">class:</span> <span class="string">&#x27;border-2 border-block&#x27;</span> %&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;%= form.submit &#x27;送出&#x27;, class: &#x27;bg-rose-700 text-white px-3 py-2&#x27; %&gt;</span></span><br><span class="line"><span class="regexp">&lt;% end %&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br></pre></td></tr></table></figure><blockquote><h3 id="simple-format"><a href="#simple-format" class="headerlink" title="simple_format"></a>simple_format</h3><p>使 textarea 中的換行有效：<code>@product.description.gsub(&#39;\n&#39;, &lt;bt /&gt;).html_safe</code></p></blockquote><h2 id="CRUD-的建構"><a href="#CRUD-的建構" class="headerlink" title="CRUD 的建構"></a>CRUD 的建構</h2><blockquote><h3 id="預先處理"><a href="#預先處理" class="headerlink" title="預先處理"></a>預先處理</h3><p>建議選 only 比較保險，後續新增方法不用再調整，較為保守。</p><p><code>before_action :find_product, only: [:show, :edit, :update, :destroy]</code></p><p><code>before_action :find_product, except: [:index, :new, :create]</code></p></blockquote><blockquote><h3 id="render-提升使用者體驗"><a href="#render-提升使用者體驗" class="headerlink" title="render 提升使用者體驗"></a>render 提升使用者體驗</h3></blockquote><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><h3 id="error-any"><a href="#error-any" class="headerlink" title="error.any?"></a>error.any?</h3><p>剛出生沒有錯。<br>要經過 save ，觸發驗證之後，才會有錯誤結果存入物件的 errors 字串陣列。</p><p>save：存取成功，回傳 true；存取失敗，回傳 false。(其他資料庫操作的說明，只是 console.log)</p><h3 id="錯誤欄位提示"><a href="#錯誤欄位提示" class="headerlink" title="錯誤欄位提示"></a>錯誤欄位提示</h3><p>.field_with_errors input {border: 2px solid red} 設定錯誤框紅色</p><h3 id="R"><a href="#R" class="headerlink" title="R"></a>R</h3><p><code>Product</code> 後續的方法，為 order, where, find_by 不需要寫 <code>all</code>，其他沒有特定形式的全選就都要寫。</p><h3 id="呈現列表：資料的查找"><a href="#呈現列表：資料的查找" class="headerlink" title="呈現列表：資料的查找"></a>呈現列表：資料的查找</h3><ul><li>find 系列：只會找一個，有多筆會只顯示第一筆。<ul><li>find(1)：就是找 id。(如果找不到，就會 activeRecordNotFound。)</li><li>find_by(id: 1)：可以設定要找什麼。(如果找不到就 nil，不會錯誤。)<br>用在使用者登入，帳號密碼輸入錯誤也不會進入 404。</li><li>find_by!(id: 1)：可以設定要找什麼。(找不到，就會 activeRecordNotFound)</li></ul></li><li>where(id: 1)：回傳陣列</li></ul><blockquote><h4 id="除錯-──-處理錯誤資料請求"><a href="#除錯-──-處理錯誤資料請求" class="headerlink" title="除錯 ── 處理錯誤資料請求"></a>除錯 ── 處理錯誤資料請求</h4><p>類似 JS 中的 try…catch，ruby 中是用 begin… rescue… end。<br><code>/public</code> 會優先於 <code>routes.rb</code> 的路徑判斷，像是 404, 422, 500 頁面。<br><img src="/images/ruby-on-rails-crud-form-with/ruby-on-rails-crud-form-with_2023-11-24-14-00-57.png"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_product</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      <span class="variable">@product</span> = <span class="title class_">Product</span>.find(params[<span class="symbol">:id</span>])</span><br><span class="line">    <span class="keyword">rescue</span> <span class="title class_">ActiveRecord</span><span class="symbol">:</span><span class="symbol">:RecordNotFound</span></span><br><span class="line">      render <span class="symbol">file:</span> <span class="title class_">Rails</span>.public_path.join(<span class="string">&#x27;404.html&#x27;</span>), <span class="symbol">status:</span> <span class="number">404</span>, <span class="symbol">layout:</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 簡寫：沒有前綴或後綴的話。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_product</span></span><br><span class="line">      <span class="variable">@product</span> = <span class="title class_">Product</span>.find(params[<span class="symbol">:id</span>])</span><br><span class="line">    <span class="keyword">rescue</span> <span class="title class_">ActiveRecord</span><span class="symbol">:</span><span class="symbol">:RecordNotFound</span></span><br><span class="line">      render <span class="symbol">file:</span> <span class="title class_">Rails</span>.public_path.join(<span class="string">&#x27;404.html&#x27;</span>), <span class="symbol">status:</span> <span class="number">404</span>, <span class="symbol">layout:</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 縮顯：controller 內針對 ActiveRecord::RecordNotFound 的應變，優點是最小功能的 action，容易捕捉問題。</span></span><br><span class="line"><span class="keyword">rescue</span> from <span class="title class_">ActiveRecord</span><span class="symbol">:</span><span class="symbol">:RecordNotFound</span>, <span class="symbol">with:</span> <span class="symbol">:not_found</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">not_found</span></span><br><span class="line">   render <span class="symbol">file:</span> <span class="title class_">Rails</span>.public_path.join(<span class="string">&#x27;404.html&#x27;</span>), <span class="symbol">status:</span> <span class="number">404</span>, <span class="symbol">layout:</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_product</span></span><br><span class="line">       <span class="variable">@product</span> = <span class="title class_">Product</span>.find(params[<span class="symbol">:id</span>])</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="呈現列表提示：flash-快閃訊息"><a href="#呈現列表提示：flash-快閃訊息" class="headerlink" title="呈現列表提示：flash[] 快閃訊息"></a>呈現列表提示：<code>flash[]</code> 快閃訊息</h4><p>flash 是類似 hash 的結構，有揮發性，被印出就會消失。<br>flash 是 rails 內建的預設變數，其中的屬性被印出後就會消失。<br>通常用作提示訊息，作為快閃訊息。</p><ol><li>在 create 中建立 flash 中的屬性：<code>flash[:notice] = &quot;請輸入名稱&quot;</code><br>key 的名稱隨意設定，但通常會取作 <code>flash[:alert] = &quot;警告&quot;</code><br><code>redirect_to root_path, notice: &#39;新增商品成功&#39;</code> 可和 redirect_to 連續使用 (僅允許 notice 和 alert)，flash 訊息將會顯示在轉往的頁面。</li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> flash[<span class="symbol">:notice</span>] %&gt;</span><br><span class="line">    &lt;%= flash[<span class="symbol">:notice</span>] %&gt;</span><br><span class="line">&lt;% <span class="keyword">end</span> %&gt;</span><br><span class="line">&lt;% <span class="keyword">if</span> flash[<span class="symbol">:alert</span>] %&gt;</span><br><span class="line">    &lt;%= flash[<span class="symbol">:alert</span>] %&gt;</span><br><span class="line">&lt;% <span class="keyword">end</span> %&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 簡寫</span></span><br><span class="line">&lt;% <span class="keyword">if</span> notice %&gt;</span><br><span class="line">    &lt;%= notice %&gt;</span><br><span class="line">&lt;% <span class="keyword">end</span> %&gt;</span><br><span class="line">&lt;% <span class="keyword">if</span> alert %&gt;</span><br><span class="line">    &lt;%= alert %&gt;</span><br><span class="line">&lt;% <span class="keyword">end</span> %&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 程式化</span></span><br><span class="line"><span class="comment"># 14:50</span></span><br><span class="line">&lt;% [<span class="symbol">:notice</span>, <span class="symbol">:alert</span>] <span class="keyword">do</span> |<span class="params"> msg-type </span>| %&gt;</span><br><span class="line">    &lt;% <span class="keyword">if</span> flash[msg-type] %&gt;</span><br><span class="line">        &lt;div <span class="keyword">class</span>=<span class="string">&quot;flash-&lt;%= [msg-type] %&gt;&quot;</span>&gt;</span><br><span class="line">            &lt;% flash[msg-type] %&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;% end %&gt;</span></span><br><span class="line"><span class="regexp">&lt;% end %&gt;</span></span><br></pre></td></tr></table></figure><h3 id="U"><a href="#U" class="headerlink" title="U"></a>U</h3><p>html5 只支援 get 和 post，不支援 patch, put, delete，所以會新增隱藏欄位，用以標示使用的方法，後續再用後端處理資料傳輸類型的選擇。<br><code>&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;patch&quot; autocomplete=&quot;off&quot;&gt;</code></p><ul><li>更新後的導向<ul><li>導向單一資料頁面<ul><li>更新資料少</li><li>視覺呈現優先</li></ul></li><li>導向編輯頁面<ul><li>更新資料多</li><li>快速編輯優先</li></ul></li></ul></li></ul><h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><p>刪除按鈕可以放在列表，或是放在單一資料頁面(show)。</p><p><code>rel=&quot;nofollow&quot;</code> 寫給 SEO 看，不給爬蟲跟蹤。寫好看的，因為爬蟲是別人寫的，沒什麼用。<br><code>data: &#123;turbo_method=&quot;delete&quot;&#125;</code>：rails 會監聽頁面中所有的連結，並且在連結中有 <code>data-turbo-method</code> 時攔截連結的預設行為，並且判斷資料中的 http verb ，再以指定的資料傳輸方式進入 api。(在 rails 7 以前的版本，欄位為 <code>data-method</code>。) (ruby 中無法使用 <code>-</code> ，所以 <code>data-*</code> 後續的名稱中，應以 <code>_</code> 底線替代 <code>-</code> 刪除線)</p><p>11:56<br><code>&lt;%= button_to &#39;刪除&#39;, product_path(@product), method: delete %&gt;</code> 會自動生成表單，包含 token、隱藏方法欄位 和 submit 按鈕。(但是老師不建議，覺得會生成表單很髒)</p><p>基本上資料都會保存，而不會直接 destroy。像是刪除商品，曾經的訂單中的已刪除商品的資料仍必須存在。</p><p>建立刪除時，設定為 <code>delete_at: timestamp, default: nil</code>。可以藉此得知刪除時間，以及藉由判斷是否為空值得知是某刪除。</p><p>16:00</p><blockquote><h4 id="bd-index"><a href="#bd-index" class="headerlink" title="bd index"></a>bd index</h4><p>資料庫建立索引，會消耗儲存空間，但是可以確保查詢時間不會根據資料量資加而增加。<br>但是寫入時間會加長，因為為了確保索引正確，每次增加資料都必須重新索引所有資料，因為資料可能是插入資料庫，而不一定從最後加入。</p><ul><li>在 migration 中，以 <code>add_index: products, :deleted_at</code> 針對特定欄位建立索引。</li><li><code>add_index: products, :deleted_at , unique: true</code> 可追加唯一值設定。式資料庫層級的驗證。</li></ul></blockquote><blockquote><h3 id="軟刪除-假刪除-soft-delete"><a href="#軟刪除-假刪除-soft-delete" class="headerlink" title="軟刪除 &#x2F; 假刪除 soft delete"></a>軟刪除 &#x2F; 假刪除 soft delete</h3><h4 id="方法一：直白表示"><a href="#方法一：直白表示" class="headerlink" title="方法一：直白表示"></a>方法一：直白表示</h4><ul><li>在 controller#destroy 改為 <code>product.update(deleted_at: Time.current)</code></li><li>在 controller#index 修改列表篩選為 <code>Product.where(deleted_at: nil).order(id: :desc)</code></li><li>在 controller#find_product 修改列表篩選為 <code>def find_product @product = Product.find_by(params[:id, :deleted_at: nil]) end</code></li></ul><h4 id="方法二：取代-rails-內建方法"><a href="#方法二：取代-rails-內建方法" class="headerlink" title="方法二：取代 rails 內建方法"></a>方法二：取代 rails 內建方法</h4><ul><li>在 applicationController 建立優先的 destroy 方法，取代 rails 預設的 destroy 方法。<br><code>def destroy update(deleted_at: Time.current)</code> 可以維持使用快速建立 crud。</li><li>設定軟刪除<ul><li><code>scope :method_name , -&gt; &#123; where(deleted_at: nil) &#125;</code> 給 block 命名方便識別功能，提升可讀性。</li><li><code>default_scope &#123; where(deleted_at: nil) &#125;</code> 會在所有過濾後，再以此過濾。包含 order, find, find_by, where…</li></ul></li></ul><h4 id="方法三：使用-paranoia-套件"><a href="#方法三：使用-paranoia-套件" class="headerlink" title="方法三：使用 paranoia 套件"></a>方法三：使用 paranoia 套件</h4><p><a href="https://github.com/rubysherpas/paranoia">paranoia</a> 套件</p></blockquote><p>包裝方法 &#x2F; block &#x2F; scope 命名的理由：</p><ol><li>重複使用</li><li>增加可讀性</li></ol><hr><p>參考資料：</p><ul><li><a href="https://stackoverflow.com/questions/62269539/return-an-array-using-form-with">Return an array using <code>form_with</code>?</a>，用 form_for 建立多個複合 checkbox</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>css-sass-scss</title>
      <link href="/posts/css-sass-scss/"/>
      <url>/posts/css-sass-scss/</url>
      
        <content type="html"><![CDATA[<p>scss 用縮排，容易出錯<br>sass 用大括號，比較安全</p><h2 id="變數"><a href="#變數" class="headerlink" title="變數"></a>變數</h2><p><code>$var-name: value</code></p><h2 id="巢狀結構-nesting"><a href="#巢狀結構-nesting" class="headerlink" title="巢狀結構 nesting"></a>巢狀結構 nesting</h2><p>避免 css 不斷往下裝</p><p>過去需要編譯器轉換，現在瀏覽器已支援。</p><p>原生 CSS 的巢狀結構，需要加 <code>&amp;</code>，ㄋ 1j6m&#x2F;4</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.field_with_errors</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline;</span><br><span class="line"></span><br><span class="line">  &amp; <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid red;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp; <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;number&quot;</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@apply</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RoR | model 的資料驗證</title>
      <link href="/posts/ruby-on-rails-model-validations/"/>
      <url>/posts/ruby-on-rails-model-validations/</url>
      
        <content type="html"><![CDATA[<h2 id="model-的資料驗證"><a href="#model-的資料驗證" class="headerlink" title="model 的資料驗證"></a>model 的資料驗證</h2><p>model 是 DB 的 manager &#x2F; 代理人。</p><p>validates 是個 action，有兩個引數，最後的是 hash：<code>validates (:title, &#123;presence: true, length: 2&#125;)</code>。<br>rails 4 以前的寫法：<code>validate_presence_of :title</code>。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span> &lt; <span class="title class_ inherited__">ApplicationRecord</span></span><br><span class="line">    <span class="comment"># 欄位資料不可為空</span></span><br><span class="line">    validates <span class="symbol">:title</span>, <span class="symbol">presence:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 欄位資料不可為空</span></span><br><span class="line">    validates <span class="symbol">:price</span>, <span class="symbol">numericality:</span> &#123; <span class="symbol">greater_than:</span> <span class="number">0</span> &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="重複驗證"><a href="#重複驗證" class="headerlink" title="重複驗證"></a>重複驗證</h3><p>model 會生成虛擬的欄位，在資料庫中則沒有。</p><p><code>validates: :password, confirmation: true</code></p><h3 id="雜湊-hashed"><a href="#雜湊-hashed" class="headerlink" title="雜湊 hashed"></a>雜湊 hashed</h3><p>其實也不是加密，是「單向編碼」。消極抵抗。</p><p>密碼加密，叫做「雜湊」</p><p>不建議用 before_save，因為這樣修改資料時也會重新加密，增加耗能。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">before_create <span class="symbol">:encrypt_password</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_password</span></span><br><span class="line">    <span class="variable language_">self</span>.password = <span class="title class_">Digest</span><span class="symbol">:</span><span class="symbol">:SHA1</span>.hexdigest(<span class="variable language_">self</span>.password)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>加密和解密不同，會有 key 才能解密，用碰撞攻擊是無法解碼的</strong></p><blockquote><h4 id="我的密碼沒加密"><a href="#我的密碼沒加密" class="headerlink" title="我的密碼沒加密"></a>我的密碼沒加密</h4><p><a href="https://plainpass.com/">https://plainpass.com/</a></p></blockquote><p><code>Digest::MD5.hexdigest(&#39;123&#39;)</code> 可測試查看加密結果。<br>MD5 加密機制已經被破解，可解密。否則應該無法被反推。</p><p>目前普遍已經不用 MD5，改用 SHA1。<br><code>Digest::SHA1.hexdigest(&#39;123&#39;)</code> 可測試查看加密結果。<br>更安全一點，用 16 進位。也可以被解密，只是破解時間較長。</p><p><code>Digest::SHA256.hexdigest(&#39;123&#39;)</code> 時間更長。</p><h4 id="密碼學中的-salt：雜湊演算法"><a href="#密碼學中的-salt：雜湊演算法" class="headerlink" title="密碼學中的 salt：雜湊演算法"></a>密碼學中的 salt：雜湊演算法</h4><p>Salt<a href="https://zh.wikipedia.org/zh-tw/%E7%9B%90_(%E5%AF%86%E7%A0%81%E5%AD%A6)">鹽</a><br>鹽巴的複雜度，決定破解時間長度。</p><p>碰撞攻擊 (暴力破解法) &#x2F; 生日攻擊法：為什麼公車一次來三班，數學謎題書</p><p>在雜湊之前，複雜化使用者輸入的密碼，延長破解時間、增加額外安全性。<br>(密碼一定可以被破解，用迴圈跑所有文字組合)</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">before_create <span class="symbol">:encrypt_password</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_password</span></span><br><span class="line">    salted_password = <span class="string">&quot;*xx<span class="subst">#&#123;&#123;<span class="variable language_">self</span>.password&#125;</span>yy-&#125;&quot;</span></span><br><span class="line">    <span class="variable language_">self</span>.password = <span class="title class_">Digest</span><span class="symbol">:</span><span class="symbol">:SHA1</span>.hexdigest(salted_password)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>登入</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">self</span>.login(user_params)</span><br><span class="line">    email = user_params[<span class="symbol">:email</span>]</span><br><span class="line">    password = <span class="title class_">Digest</span><span class="symbol">:</span><span class="symbol">:SHA256</span>.hexdigest(<span class="string">&quot;*xx<span class="subst">#&#123;user_params[<span class="symbol">:password</span>]&#125;</span>yy-&#125;&quot;</span>)</span><br><span class="line">    <span class="comment"># ruby 3 以後才可簡寫，否則必須寫成 find_by(email: email, password: password)</span></span><br><span class="line">    find_by(<span class="symbol">email:</span>, <span class="symbol">password:</span> )</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><h5 id="不是用開源專案，因為-salt-加密方式會直接被看到"><a href="#不是用開源專案，因為-salt-加密方式會直接被看到" class="headerlink" title="不是用開源專案，因為 salt 加密方式會直接被看到"></a>不是用開源專案，因為 salt 加密方式會直接被看到</h5></blockquote><h4 id="2FA-二階段驗證"><a href="#2FA-二階段驗證" class="headerlink" title="2FA 二階段驗證"></a>2FA 二階段驗證</h4><p>可能是手機簡訊，之類的</p><h3 id="暫存空間-session-cookie"><a href="#暫存空間-session-cookie" class="headerlink" title="暫存空間 session, cookie"></a>暫存空間 session, cookie</h3><p>所謂的會員系統的「登入 &#x2F; 登出」，就是比對號碼牌。<br>後端 server 發送 session，前端瀏覽器就會取得 cookie。</p><p><strong>無痕視窗就是，每次關閉瀏覽器時都會清除 cookie</strong><br><strong>管理帳號對應的裝置，刪除某個設備，就是使指定設備的 session 失效。</strong></p><p>每個 request 都會帶著使用者瀏覽器的 cookie，讓 server 可以藉此回應請求。<br>cookie 會根據網域，切換每個網域專屬的 cookie。</p><p>session 和 flash 都是特別的 hash，而 flash 是特別版的 session、揮發性的 session。<br>session 儲存後，會一直存在到瀏覽器清除暫存。</p><ul><li>session：在 server 上，是網站留有的存單。</li><li>cookie：在 browser 上，是使用者得到的取貨單。<br>而 cookie 預設會定期清除，需要自己設定拉長 cookie 時間。<br>清 cookie 可能造成網站登出，因為就像撕掉取貨單。</li></ul><p>登出的可能：</p><ul><li>session 失效：網站重新設定，或重發、過期。</li><li>cookie 失效：瀏覽器 cookie 清除，或過期。</li></ul><hr><p>參考資料：</p><ul><li><a href="https://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html">Active Record Callbacks</a></li><li><a href="https://buzzorange.com/techorange/2017/02/24/google-sha1/">Google 攻破了最重要的加密技術！用 9 兆次演算暴力破解「SHA-1 安全加密演算法」</a></li><li><a href="https://netmag.tw/2022/12/21/nist-to-retire-sha-1-encryption-algorithm-in-2030">掰掰！27 歲的 SHA-1 加密演算法 美國宣布 8 年後淘汰 SHA-1</a></li></ul><blockquote><h2 id="快速建立會員系統的-rails-套件"><a href="#快速建立會員系統的-rails-套件" class="headerlink" title="快速建立會員系統的 rails 套件"></a>快速建立會員系統的 rails 套件</h2><ol><li>bundle install devise</li><li>rails g devise:install</li><li>rails g devise User：預設 email, password</li><li>rails db:migrate<br><a href="https://github.com/heartcombo/devise">drvise</a></li></ol></blockquote><blockquote><h2 id="駭客可以根據存在或不存在的反應時間有差"><a href="#駭客可以根據存在或不存在的反應時間有差" class="headerlink" title="駭客可以根據存在或不存在的反應時間有差"></a>駭客可以根據存在或不存在的反應時間有差</h2><p>因為帳號存在，查找時間就會比較長。<br>如果帳號不存在，查找時間就會比較短。<br>而 devise 有特別設計延長帳號不存在的時間！</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RoR | Model 的建立 &amp; migration 機制</title>
      <link href="/posts/ruby-on-rails-model-migration-sandbox/"/>
      <url>/posts/ruby-on-rails-model-migration-sandbox/</url>
      
        <content type="html"><![CDATA[<p>model 驗證 和 DB 驗證不同，所以可以做兩層驗證。</p><ol><li>model validate<ul><li>在轉換網站系統時，與其他程式共用資料庫，不符合的資料將可能進入資料庫。</li></ul></li><li>DB validate</li></ol><p><strong>Fat Model, Thin Controller</strong><br>重複度：model &gt; view &gt; controller<br>驗證邏輯都寫在 model，因為 controller 會重複操作 model 和 view (render)<br>驗證流程可能會用在不同的 controller</p><h2 id="Model-──-資料庫建置"><a href="#Model-──-資料庫建置" class="headerlink" title="Model ── 資料庫建置"></a>Model ── 資料庫建置</h2><h3 id="建置-model"><a href="#建置-model" class="headerlink" title="建置 model"></a>建置 model</h3><p>資料庫名稱會自動以大寫開頭，儘管建置時使用小寫。<br>❗ 表格名稱是小寫開頭、複數，model 名稱是大寫、單數。</p><ul><li>model 的名稱為單數，如果取名為複數，會自動報錯，並且更名為單數檔名。<br><code>[WARNING] The model name &#39;books&#39; was recognized as a plural, using the singular &#39;book&#39; instead. Override with --force-plural or setup custom inflection rules for this noun before running the generator.</code></li></ul><ol><li>建立 model： <code>$ rails g model Product title:string description:text price:decimal</code><ul><li>active_record 紀錄<ul><li>migrate：migration 描述檔，新建在 <code>db/migrate</code> 中。</li><li>models：<code>app/models/resource.rb</code>。</li></ul></li><li>test_unit 測試檔<ul><li><code>test/models/resource_test.rb</code></li><li><code>test/fixtures/resource.yml</code></li></ul></li></ul></li><li>建立 migration：<code>$ rails db:migrate</code><ul><li>如果沒有建置變化的 migration，將會出現錯誤：ActiveRecord::PendingMigrationError。</li><li>在 <code>db/config/database.yml</code> 中，可以查看當前專案使用的資料庫資訊，而 rails 預設使用的資料庫系統為 sqlite。可以在其中針對開發、測試、發布設定使用不同的資料庫。</li></ul></li></ol><p>可以用<code>:references</code> 用外來鍵取得 id，形成 <code>..._ID</code> 的流水編號指向 <code>...</code></p><p><img src="https://cdn.discordapp.com/attachments/1116009887550423102/1176152717530505256/image.png?ex=656dd493&is=655b5f93&hm=a9e8a8213f3b49c7a5988793b41464578766a981cd3531acb0fc86083a8188eb&"></p><h3 id="紀錄-migration"><a href="#紀錄-migration" class="headerlink" title="紀錄 migration"></a>紀錄 migration</h3><p>增減欄位時，需要調整的區塊：<br>M - migration (刪減欄位時，不建議調整，以後資料還在)<br>V - form<br>C - permit</p><ul><li><p>在紀錄 <code>migration</code> 後，可以<code>$ rails db:rollback</code>，反悔 <code>db:migration</code>。(可能會刪除資料庫檔案，無法救回資料)</p><ul><li>假如運作錯誤修改資料庫，應該用新的 migration 修改，而不要 rollback。</li></ul></li><li><p>可以查看 <code>/db/schema.rb</code>，觀看 ruby 自動生成在其中的資料庫紀錄。</p></li><li><p>新建 migration，修改 model 欄位：<code>$ rails g migration 紀錄名稱</code></p><ul><li>新增 db 欄位：<code>add_column :table_name, :column_name, :data-type</code><ul><li>可以增加預設值：<code>, default: false</code></li></ul></li></ul></li><li><p>刪除 migration：<code>$ rails d migration 紀錄名稱</code></p></li></ul><p>每個設定的欄位，會在 migration 中紛紛留下紀錄。如果有需要，也可以在每個項目後方加上預設值：<code>, default: 0</code> 等等。</p><p>migration 遷息、遷移，DB 的成長紀錄。<br>每次變動 DB，都會新增一個 migration。</p><ul><li>Product.count 檢視資料總筆數</li><li>Product.all 檢視所有資料</li></ul><blockquote><p>生成的檔案內容：</p><ul><li>自動建立流水編號 ID。 (可以使用 <code>id: false</code> 關閉自動建立流水編號)</li><li>自訂欄位。</li><li>自動建立 timestamps，是以下兩個欄位建置的縮寫，可記錄創建時間以及更新時間。<ul><li>t.datetime :created_at</li><li>t.datetime :updated_at</li></ul></li></ul></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CreateProducts</span> &lt; <span class="title class_ inherited__">ActiveRecord::Migration</span>[<span class="number">7.1</span>]</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">change</span></span><br><span class="line">    create_table <span class="symbol">:products</span> <span class="keyword">do</span> |<span class="params">t</span>|</span><br><span class="line">      t.string <span class="symbol">:title</span></span><br><span class="line">      t.text <span class="symbol">:description</span></span><br><span class="line">      t.decimal <span class="symbol">:amount</span></span><br><span class="line">      t.boolean <span class="symbol">:launched</span>, <span class="symbol">default:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      t.timestamps</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><h4 id="藉由輸入-rails-g-migration-檔案名稱，新增一個-db-版本紀錄。"><a href="#藉由輸入-rails-g-migration-檔案名稱，新增一個-db-版本紀錄。" class="headerlink" title="藉由輸入 $ rails g migration 檔案名稱，新增一個 db 版本紀錄。"></a>藉由輸入 <code>$ rails g migration 檔案名稱</code>，新增一個 db 版本紀錄。</h4><p>如果要更改資料庫，不要直接改動 migration，而是新建</p><ul><li><code>rails db:migrate:status</code> 生成 <code>storage/development.sqlite</code></li><li>錯誤提示：Migrations are pending. 描述檔待辦。<ul><li>未處理 migration，不管是自己建立，還是別人建立。</li><li>防止資料庫不同步。</li><li>用 <code>rails db:migrate</code> 更新 migrate<ul><li>概念和 Git 的 pull 一樣。</li></ul></li></ul></li></ul></blockquote><h3 id="測試-sandbox"><a href="#測試-sandbox" class="headerlink" title="測試 sandbox"></a>測試 sandbox</h3><p><code>$ rails console</code><br><code>$ rails console</code><br><code>$ rails c --sandbox</code>：沙盒，練習用。<br>以 <code>ctrl + d</code> 退出沙盒模式。</p><blockquote><h4 id="資料存入資料庫的程序"><a href="#資料存入資料庫的程序" class="headerlink" title="資料存入資料庫的程序"></a>資料存入資料庫的程序</h4><ul><li>生成的 Product 是類別，建立一筆資料的實體 <code>p1 = Product.new</code>，但還未加入資料庫。<br>(還沒有 ID 和 時間。)</li><li>可以將 hash 資料存入類別 <code>&#123;:title =&gt; &quot;&quot;&#125;</code></li><li><code>p1.save</code> 寫進資料庫，等於 SQL：<code>insert into ...</code></li></ul></blockquote><hr><p>參考資料：</p><ul><li><a href="https://railsbook.tw/chapters/17-model-migration">Model Migration</a>，為自己學 Ruby on Rails</li><li><a href="https://ihower.tw/rails/migrations.html">Active Record - 資料庫遷移(Migration)</a>，Rails 實戰聖經</li><li><a href="https://www.beekeeperstudio.io/blog/rails-migration-data-types">Rails Migrations: Basic data Types</a>，Matthew Rathbone (230703)</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RoR | 防止站內攻擊 ── Controller 中的欄位限制</title>
      <link href="/posts/ruby-on-rails-form-xss-params-form-for/"/>
      <url>/posts/ruby-on-rails-form-xss-params-form-for/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="「我不是機器人」驗證"><a href="#「我不是機器人」驗證" class="headerlink" title="「我不是機器人」驗證"></a>「我不是機器人」驗證</h3><p>是有用的東西，背後機制很複雜</p><ul><li><p>🚫 用隱藏欄位，假裝有機器人機制，很爛</p></li><li><p>投票防堵機制</p></li><li><p>圖片辨識</p></li></ul></blockquote><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><blockquote><p>站內攻擊，<br>或是猜到欄位名稱，修改 html。<br>rails 安全機制</p><p>forbidden attribute</p></blockquote><p>可以手動一一加入：</p><p>在 form 中的 input 的 name 加上 <code>product[:title]</code></p><p>在 html 中寫成像是物件的字串，</p><blockquote><p>unknown attribute of {product}</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">product = <span class="title class_">Product</span>.new(params.<span class="keyword">require</span>(<span class="symbol">:product</span>).permit(<span class="symbol">:title</span>, <span class="symbol">:description</span>, <span class="symbol">:price</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">create</span></span><br><span class="line">    <span class="comment"># 建立資料</span></span><br><span class="line">    product = <span class="title class_">Product</span>.new(product_params)</span><br><span class="line">    <span class="comment"># 儲存進資料庫</span></span><br><span class="line">    product.save</span><br><span class="line">    <span class="comment"># 跳回首頁</span></span><br><span class="line">    redirect_to root_path</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Strong Parameter：過濾掉不必要的欄位。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">product</span></span><br><span class="line">    params.<span class="keyword">require</span>(<span class="symbol">:product</span>).permit(<span class="symbol">:title</span>, <span class="symbol">:description</span>, <span class="symbol">:price</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><code>require(:[:product].permit(:title, :description, :price))</code><br>防止攻擊多寫欄位，而填入重要欄位，像是「是否為管理員」、「是否為 VIP」等等。<br>且攻擊錯誤時，不會有錯誤提示，讓攻擊者無從知道攻擊效果，無聲無息的過濾掉。</p><h2 id="params"><a href="#params" class="headerlink" title="params"></a>params</h2><p>clean up to strange parameters</p><ol><li>在 <code>view/resources/mew.html.erb</code> 中的表單，欄位的 name 參數設定為 <code>resource[key]</code>。<ul><li>一個 <code>&lt;form&gt;</code> 中的所有欄位資料，將被集結成一個 params，傳往 <code>controllers/resources_controller</code></li></ul></li><li></li></ol><blockquote><h3 id="params-的屬性操作"><a href="#params-的屬性操作" class="headerlink" title="params 的屬性操作"></a>params 的屬性操作</h3><p>Parameters (params) 是加強版的 hash，可以用 symbol 或 string 取值，幫助其他語言使用者的語言轉換，因為其他語言沒有 symbol 的概念。</p><ul><li><code>params[:key]</code></li><li><code>params[&quot;key&quot;]</code></li></ul></blockquote><h3 id="form-for"><a href="#form-for" class="headerlink" title="form_for"></a>form_for</h3><p>form helper 會為一個 model 建立一個表單。<br><code>&lt;%= form_for(Resource.new) %&gt;</code><br>猜測</p><ol><li>生成新 model ，就是想新增。</li><li>生成 hidden</li></ol><h3 id="除錯"><a href="#除錯" class="headerlink" title="除錯"></a>除錯</h3><p>controller 傳入錯誤欄位名稱的資料往資料庫<br><img src="https://cdn.discordapp.com/attachments/1116009887550423102/1176144922185826364/image.png?ex=656dcd51&is=655b5851&hm=730182b94929fe4f3da0eba612bd5af1664d41b671cee0d5eba47fc176e55ec6&"></p><p>傳入未經篩選的 params 資料 (禁止包含 Auth_token)<br><img src="https://cdn.discordapp.com/attachments/1116009887550423102/1176157301908983858/image.png?ex=656dd8d8&is=655b63d8&hm=41b3e8a89757f132eda2c96c58e349b7c7de4c5cdc163af588611adbbbd0b521&"></p><hr><p>參考資料：</p><ul><li><a href="https://blog.huli.tw/2021/06/19/xss-attack-and-defense/">淺談 XSS 攻擊與防禦的各個環節</a>，Huli (20210619)</li><li><a href="https://www.explainthis.io/zh-hant/swe/what-is-xss">什麼是 XSS 攻擊？如何防範？</a>，ExplainThis (20230209)</li><li><a href="https://tech-blog.cymetrics.io/posts/jo/zerobased-cross-site-scripting/">零基礎資安系列（二）-認識 XSS（Cross-Site Scripting）</a>，jo (20210527)</li><li><a href="https://ihower.tw/rails/fullstack-security-xss.html">XSS 跨站腳本攻擊</a>，Rails 實戰聖經</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PostgreSQL | Ubuntu 環境設置 &amp; rails 專案資料庫建置</title>
      <link href="/posts/pg-install/"/>
      <url>/posts/pg-install/</url>
      
        <content type="html"><![CDATA[<p><img src="https://www.vnewin.com/wp-content/uploads/2021/06/postgreSQL-1.png"></p><p>PostgreSQL 是一個開源的關聯式資料庫，比起使用 rails 專案預設使用的 SQLite，似乎功能更加完備。如果想要了解更多資料庫的操作，可以查看 <a href="https://www.prisma.io/dataguide">Prisma’s Data Guide</a>，其中不只介紹 PostgreSQL，還有 MySQL 和 MongoDB 等等。</p><blockquote><p><strong>目前安裝版本：</strong></p><p>環境：Ubuntu 22.04<br>軟體：pg 1.5.4</p></blockquote><h2 id="安裝-PostgreSQL"><a href="#安裝-PostgreSQL" class="headerlink" title="安裝 PostgreSQL"></a>安裝 PostgreSQL</h2><p>依照官網的安裝程序，一步步安裝：</p><ol><li>選擇 Linux 中的 Ubuntu，進入 <a href="https://www.postgresql.org/download/linux/ubuntu/">Linux downloads (Ubuntu)</a> 頁面。</li><li>複製其中的程式碼區塊內容，貼上終端機並執行。</li></ol><h2 id="設置-PostgreSQL-環境設定"><a href="#設置-PostgreSQL-環境設定" class="headerlink" title="設置 PostgreSQL 環境設定"></a>設置 PostgreSQL 環境設定</h2><p>根據 <a href="https://www.virtono.com/community/tutorial-how-to/how-to-install-postgresql-on-ubuntu-22-04/">How to install PostgreSQL on Ubuntu 22.04</a> 設置環境：</p><ol><li>Update System Packages Index：<code>$ sudo apt update &amp;&amp; sudo apt upgrade -y</code></li><li>Install PostgreSQL on Ubuntu：<code>$ sudo apt install postgresql postgresql-contrib -y</code></li><li>Verify Installation：<code>sudo systemctl status postgresql</code></li></ol><ul><li>錯誤處理：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">willa@Vivobook_14:/mnt/c/workspace/test_lab/rails-blog$ sudo systemctl status postgresql</span><br><span class="line">System has not been booted with systemd as init system (PID 1). Can&#x27;t operate.</span><br><span class="line">Failed to connect to bus: Host is down</span><br><span class="line">willa@Vivobook_14:/mnt/c/workspace/test_lab/rails-blog$ ps -p 1</span><br><span class="line">  PID TTY          TIME CMD</span><br><span class="line">    1 ?        00:00:01 init</span><br></pre></td></tr></table></figure><ol><li>轉換系統： <code>ps -p 1</code></li><li>開啟 PostgreSQL server： <code>sudo service postgresql start</code></li><li>確認 PostgreSQL server 狀態： <code> sudo service postgresql status</code></li></ol></li><li>安裝成功提示：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">willa@Vivobook_14:/mnt/c/workspace/test_lab/rails-blog$ sudo service postgresql start</span><br><span class="line"> * Starting PostgreSQL 14 database server    [ OK ]</span><br><span class="line"> * Starting PostgreSQL 16 database server    [ OK ]</span><br><span class="line">willa@Vivobook_14:/mnt/c/workspace/test_lab/rails-blog$ sudo service postgresql status</span><br><span class="line">14/main (port 5432): online</span><br><span class="line">16/main (port 5433): online</span><br></pre></td></tr></table></figure></li></ul><blockquote><h3 id="兩層-PostgreSQL-shell-？"><a href="#兩層-PostgreSQL-shell-？" class="headerlink" title="兩層 PostgreSQL shell ？"></a>兩層 PostgreSQL shell ？</h3><p>一開始進入的就是 PostgreSQL Shell，接著決定操作資料庫的角色。</p></blockquote><h3 id="設置預設的-PostgreSQL-role"><a href="#設置預設的-PostgreSQL-role" class="headerlink" title="設置預設的 PostgreSQL role"></a>設置預設的 PostgreSQL role</h3><ul><li>Accessing PostgreSQL on Ubuntu<ol><li>使用最高管理者，操作 PostgreSQL Shell：<code>sudo su - postgres</code></li><li>使用預設 user 進入 postgresql shell：<code>psql</code></li><li>建立角色：<code>CREATE ROLE username with NOSUPERUSER NOINHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;</code></li><li>建立角色資料庫：<code>create database username;</code><br><img src="https://cdn.discordapp.com/attachments/1176478506016833539/1176511515503898634/image.png?ex=656f22bb&is=655cadbb&hm=ce2935ebda2420d9db89c5eda4555070c0ce607f462915b4777e4ba6b2f9eb9f&"></li><li>查看角色是否建立成功： - 方法一，查看角色列表：<code>\du</code> - 方法二：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> usename <span class="keyword">AS</span> username,</span><br><span class="line"><span class="keyword">CASE</span></span><br><span class="line"><span class="keyword">WHEN</span> usesuper <span class="keyword">THEN</span></span><br><span class="line"><span class="built_in">CAST</span>(<span class="string">&#x27;superuser&#x27;</span> <span class="keyword">AS</span> pg_catalog.text)</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line"><span class="built_in">CAST</span>(<span class="string">&#x27;No user&#x27;</span> <span class="keyword">AS</span> pg_catalog.text)</span><br><span class="line"><span class="keyword">END</span> user_attribute</span><br><span class="line"><span class="keyword">FROM</span> pg_catalog.pg_user</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> username <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure></li></ol></li></ul><p>⛔ 未建立角色的話：<br><img src="https://cdn.discordapp.com/attachments/1176478506016833539/1176508876439425065/image.png?ex=656f2046&is=655cab46&hm=0ceab8eef2fa24f58305a3d04fbe64a4f878158da924ba22c65bf5778b012eab&"><br>✅ 成功設置預設使用者：<br><img src="https://cdn.discordapp.com/attachments/1176478506016833539/1176512081722343474/image.png?ex=656f2342&is=655cae42&hm=619063c1eb8a5b498e3d0e65117ac70cc537b63dafe974d448b97ac62961b68f&"></p><h2 id="建立-rails-專案資料庫"><a href="#建立-rails-專案資料庫" class="headerlink" title="建立 rails 專案資料庫"></a>建立 rails 專案資料庫</h2><p>藉由 <code>$ git clone</code> 接受他人建立的 rails 專案後，接著在專案內安裝本次決定使用的 PostgreSQL，並且在本機建立此專案的專屬資料庫。</p><ol><li>安裝符合專案的 PostgreSQL 1.5.4<ul><li><code>$ git clone</code> 後的錯誤訊息：<br><img src="https://cdn.discordapp.com/attachments/1176478506016833539/1176512847757463612/image.png?ex=656f23f9&is=655caef9&hm=d503b81300f027f6e23815f09a2990cc36fdc25d86abac6739cb560761f04e8e&"></li><li>安裝專案套件 <code>bundel</code> 後的錯誤訊息：<br><img src="https://cdn.discordapp.com/attachments/1176478506016833539/1176513034450108416/image.png?ex=656f2425&is=655caf25&hm=02516d977d2d2400d4f57cfcc82b2c887d40afffff2425b8261cc8d00418a563&"></li><li>安裝 libpq：<code>$  sudo apt install libpq-dev</code></li><li>再次 <code>bundel</code></li></ul></li><li>建立本地資料庫：<ul><li>沒有資料庫時，rails 專案的錯誤提示：<br><img src="https://cdn.discordapp.com/attachments/1176478506016833539/1176779576492433509/image.png?ex=65701c62&is=655da762&hm=0962b6197f1355fd89e6356ceafef9dfdf4100623d7dac116bd65a29d953e3d5&"></li><li>建立資料庫：<code>bundle exec rake db:create</code></li><li>因為角色權限不包含 <code>CREATEDB</code>，所以無法建立資料庫。</li><li>修改角色權限：<ol><li>以最高管理員進入 PostgreSQL Shell：<code>sudo su - postgres</code></li><li>修改角色權限：<code>ALTER ROLE &quot;willa&quot; WITH LOGIN CREATEROLE CREATEDB;</code></li><li>退出 PostgreSQL Shell。</li></ol></li><li>重新建立資料庫：<ul><li>⛔ 還沒建立時的錯誤提示：<br><img src="https://cdn.discordapp.com/attachments/1116009887550423102/1176560516202770512/image.png?ex=656f505e&is=655cdb5e&hm=61cb4bd0b0ca2635ab9d3d652ee5c440dce2cc7d6a1fd3c47af580ab3fb78574&"></li><li>✅ 建立成功時的提示：<br><img src="https://cdn.discordapp.com/attachments/1176478506016833539/1176560028996616204/image.png?ex=656f4fea&is=655cdaea&hm=2756584f350143210c7387d8afc3fe43442a19799cb8f7ce22dd634bfe37e792&"></li></ul></li></ul></li></ol><hr><p>參考資料：</p><ul><li><a href="https://www.prisma.io/dataguide/postgresql/authentication-and-authorization/role-management#changing-existing-roles">Managing roles and role attributes in PostgreSQL</a></li><li><a href="https://dev.to/neshaz/how-to-use-rake-db-commands-in-the-correct-way--50o2">How to use rake db commands in the correct way</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> rails </tag>
            
            <tag> linux </tag>
            
            <tag> postgresql </tag>
            
            <tag> db </tag>
            
            <tag> vmx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RoR | 防止站外攻擊 ── View 中的權限驗證</title>
      <link href="/posts/ruby-on-rails-form-csrf-authenticity-token/"/>
      <url>/posts/ruby-on-rails-form-csrf-authenticity-token/</url>
      
        <content type="html"><![CDATA[<p>turbo，ruby 7 更新，預設打開並且可能有奇妙現象(不好控制)。<br>可以將 <code>data-turbo=&quot;false&quot;</code> 加入 form 的屬性中：<code>form action=&quot;/products/create&quot; method=&quot;post&quot; data-turbo=&quot;false&quot;</code></p><ol><li>在 routes.rb 中，建立 <code>post &#39;products&#39;, to: &#39;products#create&#39;</code></li><li>重新整理表單頁面。</li><li>建立 controller：<code>$ rails g controller products</code></li><li>在 controller 中建立 action<ul><li>保護機制<br><img src="https://cdn.discordapp.com/attachments/1116009887550423102/1176042113432047636/image.png?ex=656d6d91&is=655af891&hm=6b9e7a8cfb6c78d66b3cdcbdebe9771da8a3ed3b9a0b9e7cf8a0b1716b799353&"></li></ul></li></ol><blockquote><h2 id="前端驗證沒用"><a href="#前端驗證沒用" class="headerlink" title="前端驗證沒用"></a>前端驗證沒用</h2><p>可以經過調整前端程式碼送出資料</p><p>alert(“我是彈跳視窗”)<br><img src="https://miro.medium.com/v2/resize:fit:1000/1*ANaQigxVni_lqjUdO5-T8g.jpeg"></p></blockquote><h2 id="authenticity-token"><a href="#authenticity-token" class="headerlink" title="authenticity_token"></a>authenticity_token</h2><p>只要知道表單中的設定，包刮傳輸路徑 (action)、傳輸資料方式 (method) 以及設定的資料欄位名稱 (name)，有心人士就可以透過製作灌票機器的方式，操作網路投票結果。為此，rails 規定每個表單都必須包含 <code>&lt;input &gt;</code></p><blockquote><h3 id="CSRF-token"><a href="#CSRF-token" class="headerlink" title="CSRF token"></a>CSRF token</h3></blockquote><p>post 必定搭配 authenticity_token 機制。</p><p>authenticity，防衛灌票。不需要加，我不是機器人。<br>站內 token，確保是站內 token，每次重新整理瀏覽器會生成新 token。<br>防止他人設計機器人，直接連結 post 網址進行灌票(因為 post 用在新增，而 get 只會查詢資料)。</p><p>跨站請求攻擊防衛機制<br>(Cross-site )<br>沒有權限</p><ul><li><code>name=&quot;authenticity_token：rails&quot;</code> 自動生成<ul><li><code>value=&quot;&lt;%= for_authenticity_token&gt;&quot;</code></li></ul></li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;authenticity_token&quot;</span> value=<span class="string">&quot;&lt;%= form_authenticity_token %&gt;&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="除錯"><a href="#除錯" class="headerlink" title="除錯"></a>除錯</h3><p>turbo，ruby 7 更新，預設打開並且可能有奇妙現象(不好控制)。<br>可以將 <code>data-turbo=&quot;false&quot;</code> 加入 form 的屬性中：<code>form action=&quot;/products/create&quot; method=&quot;post&quot; data-turbo=&quot;false&quot;</code></p><ol><li>在 routes.rb 中，建立 <code>post &#39;products&#39;, to: &#39;products#create&#39;</code></li><li>重新整理表單頁面。</li><li>建立 controller：<code>$ rails g controller products</code></li><li>在 controller 中建立 action</li></ol><p>表單中沒有建立 authenticity_token<br><img src="https://cdn.discordapp.com/attachments/1116009887550423102/1176042113432047636/image.png?ex=656d6d91&is=655af891&hm=6b9e7a8cfb6c78d66b3cdcbdebe9771da8a3ed3b9a0b9e7cf8a0b1716b799353&"></p><hr><p>參考資料：</p><ul><li><a href="https://vocus.cc/article/62f72520fd89780001fe2838">View Helper - form_tag &#x2F; form_for &#x2F; form_with</a>，Mike (20230813)</li><li><a href="https://www.explainthis.io/zh-hant/swe/what-is-csrf">什麼是 CSRF 攻擊？如何防範？</a>，ExplainThis (20230209)</li><li><a href="https://www.explainthis.io/zh-hant/swe/sql-injection">什麼是 SQL Injection？該如何避免？</a>，ExplainThis (20230209)</li><li><a href="https://ihower.tw/rails/fullstack-security-csrf.html">CSRF 跨站請求偽造</a>，Rails 實戰聖經</li><li><a href="https://ihower.tw/rails/fullstack-security-sql-injection.html">SQL Injection 資料庫注入攻擊</a>，Rails 實戰聖經</li><li><a href="https://tech-blog.cymetrics.io/posts/jo/zerobased-cross-site-request-forgery/">零基礎資安系列（一）-認識 CSRF（Cross Site Request Forgery）</a>，jo (20210526)</li><li><a href="https://tech-blog.cymetrics.io/posts/jo/zerobased-secure-samesite-httponly/">零基礎資安系列（三）-網站安全三本柱（Secure &amp; SameSite &amp; HttpOnly）</a>，jo (20210528)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ruby </tag>
            
            <tag> rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RoR | 路由設置 &amp; 路徑變數應用 (Path &amp; URL)</title>
      <link href="/posts/ruby-on-rails-routes-naming-link-to/"/>
      <url>/posts/ruby-on-rails-routes-naming-link-to/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/ruby-on-rails-routes-naming-link-to/ruby-on-rails-routes-naming-link-to_2023-11-24-09-07-08.png"></p><p>在 Rails 建立後，第一件要做的事就是建立 routes (路由)。routes 用於映射 URL 到 <code>controller#action</code>，當使用者通過瀏覽器發出 HTTP request，routes 將根據 URL 和 HTTP verb 執行相應的 controller action。一個 routes 可以用作 web page routes 或是 api routes，也可以兩個都是。通常是會做為 web page routes，請見以下：</p><table><thead><tr><th>依照 rails routes 預設排序</th><th>依照 CRUD 排序</th></tr></thead><tbody><tr><td>1. 🖼️ index：所有資料的呈現。<br>2. 🖼️ new：填寫新增資料的表單。<br>3. ❌ create：<code>else render :new</code><br>4. 🖼️ show：單一筆資料的呈現。<br>5. 🖼️ edit：修改單一筆資料的表單。<br>6. ❌ update：<code>else ender :edit</code><br>　　- patch<br>　　- put<br>7. ❌ destroy：<code>redirect_to resource_path</code></td><td>1. Create<br>　　- 🖼️ new：填寫新增資料的表單。<br>　　- ❌ create：<code>else render :new</code><br>2. Read<br>　　- 🖼️ index：所有資料的呈現。<br>　　- 🖼️ show：單一筆資料的呈現。<br>3. Update<br>　　- 🖼️ edit：修改單一筆資料的表單。<br>　　- ❌ update：<code>else ender :edit</code><br>4. Delete<br>　　- ❌ destroy：<code>redirect_to resource_path</code><br></td></tr></tbody></table><h2 id="routes-設定"><a href="#routes-設定" class="headerlink" title="routes 設定"></a>routes 設定</h2><p>routes 設定存在先後順序，如果有多個 routes 符合查找的內容，先解析的 routes 將會被優先存取，都不符合的話則會進入 404 頁面。也因此，將較常使用的 route 優先解析、優先撰寫，把較不常用的 route 延後解析、謝在下方，可以稍微提升效能。想要建立單一路徑可以使用 <code>get &#39;resources/http-verb&#39;, to: &#39;resources#action&#39;</code> 的方式，分別設定 HTTP verb、routes 和映射的 controller action。建立完成後，藉由 <code>$ rails routes</code> 能夠查看路徑對照表，得知專案中所有的路徑。</p><ul><li>路由書寫順率<ol><li>常用的 controller 在前，不常用的 controller 在後。</li><li>同一個 controller<ul><li>沒有 id 的在前面</li><li>有 id 的在後面<br>(因為會覆蓋非 id 系列的 action)</li></ul></li></ol></li></ul><table><thead><tr><th>路由</th><th><a href="https://example.com/resources">https://example.com/resources</a></th><th><a href="https://example.com/resources/142">https://example.com/resources/142</a></th></tr></thead><tbody><tr><td>八條</td><td><code>resource :products, except: [:destroy]</code></td><td><code>resources :products, only: [:index, :show]</code></td></tr><tr><td>追加</td><td><code>collection do post :action end</code></td><td><code>member do post :action end</code></td></tr><tr><td>說明</td><td>member 在 resource 中使用，並不會錯誤，只是也不會有 ID。</td><td></td></tr></tbody></table><h3 id="Path-變數-URL-變數"><a href="#Path-變數-URL-變數" class="headerlink" title="Path 變數 &amp; URL 變數"></a>Path 變數 &amp; URL 變數</h3><p>在 <code>routes.rb</code> 中建立路由後，rails 的 Helper 就會自動生成 Path 和 URL 兩個變數，方便網站架設時使用。Path 通常做為站內的引用路徑，URL 則大多用在外部分享按鈕，或是做為電子郵件中連結站內的引用網址。</p><p>相比使用字串填入引用來源，使用 Helper 生成的 Path 變數以及 URL 變數，可以在路由統一管理路徑，而不用更動 html 中的路徑設定。否則，當你要更動路徑時就必須變更所有引用相同來源的 html 檔案。另外，當前頁面中指定了不存在的 Path 或 URL 變數，將會直接出現錯誤 NameError，而不用等到進入錯誤路徑連結並顯示 404。</p><table><thead><tr><th>名稱</th><th>說明</th><th>用途</th><th>範例</th></tr></thead><tbody><tr><td>Path</td><td>除了網域的站內連結相對路徑。</td><td>站內連結</td><td>&#x2F;index</td></tr><tr><td>URL</td><td>包括網域名稱的完整網址。</td><td>1. 向外分享資訊<br>2. 外部信件連到站內</td><td><a href="https://example.com/index">https://example.com/index</a></td></tr></tbody></table><blockquote><h4 id="路徑變數的別名設定"><a href="#路徑變數的別名設定" class="headerlink" title="路徑變數的別名設定"></a>路徑變數的別名設定</h4><p>在 <code>routes.rb</code> 中設定的路由，可以設定「別名」利於引用時識別。透過 <code>get &#39;page-name&#39;,to: &#39;pages#page-name, as: :my-page-name</code>，就可以將 rails Helper 生成的路徑變數固定為自訂的變數名稱 <code>my-page-name_path</code>。最常見的引用方式，就是以 view helper 中的 <code>link_to</code> 的建立連結：</p><ul><li><code>&lt;%= link_to (&quot;連結顯示文字&quot;, &quot;連結路徑&quot;, &#123;method: &#125;) %&gt;</code></li><li><code>&lt;%= link_to &quot;About&quot;, &quot;/about&quot; %&gt;</code></li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以「關於我們」的路徑為例：</span></span><br><span class="line">&lt;a href=<span class="string">&quot;/about&quot;</span>&gt;about&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">&lt;a href=&quot;&lt;%= about_path %&gt;&quot;&gt;about&lt;/a</span>&gt;</span><br><span class="line">&lt;%= link_to <span class="string">&quot;About&quot;</span>, <span class="string">&quot;/about&quot;</span> %&gt;</span><br><span class="line">&lt;%= link_to <span class="string">&quot;About&quot;</span>, about_path %&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="命名規律"><a href="#命名規律" class="headerlink" title="命名規律"></a>命名規律</h3><p>統一網頁路徑的命名規則，可以避免造成檔案的識別混亂，也能避免因此建置重複功能。如果沒有遵守命名規則，將可能需要打開所有混淆的檔案進行確認資料，或是只能靠檔案最後更新時間來識別可能的正確檔案。</p><h4 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h4><p>REST (Representational State Transfer) 是 <a href="https://en.wikipedia.org/wiki/Roy_Fielding">Roy Thomas Fielding</a> 博士在 2000 年在論文中提出的網址設計風格。<a href="https://zh.wikipedia.org/zh-tw/%E8%A1%A8%E7%8E%B0%E5%B1%82%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2">維基百科</a>的範例如下：</p><table><thead><tr><th>資源</th><th><a href="https://example.com/resources">https://example.com/resources</a></th><th><a href="https://example.com/resources/142">https://example.com/resources/142</a></th></tr></thead><tbody><tr><td>GET</td><td>列出 URI，以及該資源組中每個資源的詳細資訊。</td><td>取得指定的資源的詳細資訊，格式可以自選一個合適的網路媒體類型。<br>（比如：XML、JSON 等）</td></tr><tr><td>PUT</td><td>使用給定的一組資源替換當前整組資源。</td><td>替換&#x2F;建立指定的資源。並將其追加到相應的資源組中。</td></tr><tr><td>POST</td><td>在本組資源中建立&#x2F;追加一個新的資源。該操作往往返回新資源的 URL。</td><td>把指定的資源當做一個資源組，並在其下建立&#x2F;追加一個新的元素，使其隸屬於當前資源。</td></tr><tr><td>DELETE</td><td>刪除整組資源。</td><td>刪除指定的元素。</td></tr></tbody></table><blockquote><h4 id="HTTP-verb"><a href="#HTTP-verb" class="headerlink" title="HTTP verb"></a>HTTP verb</h4><p>HTML5 的書寫格式只支援 get 和 post，而其他動詞只有藉由瀏覽器被 JS 以指定方式傳輸資料。rails 中的 form helper 會自動生成用讀取 http verb 類型的隱藏欄位，在建立表單時自動加入 authentication_token 的隱藏輸入欄，以 <code>&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;patch&quot; /&gt;</code> 的形式告知 rails 應該使用的 HTTP verb。</p><ul><li>讀取資源：get resource，通常用於查詢。<ul><li>❗ 有資料長度限制，即網址長度上限。<br>(輸入的資料將會顯示在網址中，資料內容過於明顯。)</li></ul></li><li>新增資料：post resource，通常用於會員登入。<ul><li>上傳圖片或檔案，只能使用 post，而無法使用 get。<br>(傳輸資料時不會顯示在網址中，但瀏覽器打開仍能查看。)</li></ul></li><li>更新資料：<ul><li>put resource，抽換整筆資料。</li><li>patch resource，抽換一筆資料中的部分欄位。</li></ul></li><li>刪除資料：delete</li></ul></blockquote><h4 id="Ruby-中的路徑命名常規"><a href="#Ruby-中的路徑命名常規" class="headerlink" title="Ruby 中的路徑命名常規"></a>Ruby 中的路徑命名常規</h4><p>在 <code>routes.rb</code> 中，可以在 <code>Rails.application.routes.draw do ... end</code> 內加入 <code>resources: my-resources-name</code>，會自動依照 REST 規則生成 8 條路徑 (對應到 7 個 action)。如果想要只生成部分路徑，可以在後方加上 only，限制生成的路徑：<code>resources: my-resources-name, only [:index, :show]</code>。</p><table><thead><tr><th>資源</th><th><a href="https://example.com/resources">https://example.com/resources</a></th><th><a href="https://example.com/resources/142">https://example.com/resources/142</a></th></tr></thead><tbody><tr><td>GET</td><td>resources#index, resources#<span style="background:#fff652">new</span></td><td>resources#<span style="background:#fff652">edit</span>, resources#<span style="background:#83fafc">show</span></td></tr><tr><td>PUT</td><td>resources#<span style="background:#a0fc7c">create</span></td><td></td></tr><tr><td>PATCH</td><td></td><td>resources#update</td></tr><tr><td>PUT</td><td></td><td>resources#update</td></tr><tr><td>DELETE</td><td></td><td>resources#destroy</td></tr></tbody></table><p>在路徑中有使用到 id 的話，controller 中的 action 大多要先依照 id 撈取當前物件的資料。所以，通常會在 controller 中預先處理 <code>before_action :find_product, only: [:show, :edit, :update, :destroy]</code>，或是 <code>before_action :find_product, except: [:index, :new, :create]</code>。兩者相比，會更建議使用 <code>before... ,only...</code>，後續再新增方法時才不用另外剃除，此方式更為保守且安全。</p><table><thead><tr><th>Prefix</th><th>Verb</th><th>Pattern</th><th>Controller#action</th></tr></thead><tbody><tr><td>resources</td><td>GET</td><td>&#x2F;resources(.:format)</td><td>resources#index</td></tr><tr><td></td><td>POST</td><td>&#x2F;resources(.:format)</td><td>resources#<span style="background:#a0fc7c">create</span></td></tr><tr><td>new_resources</td><td>GET</td><td>&#x2F;resources&#x2F;<span style="background:#fff652">new</span>(.:format)</td><td>resources#new</td></tr><tr><td>edit_resources</td><td>GET</td><td>&#x2F;resources&#x2F;:id&#x2F;<span style="background:#fff652">edit</span>(.:format)</td><td>resources#edit</td></tr><tr><td>resources</td><td>GET</td><td>&#x2F;resources&#x2F;:id(.:format)</td><td>resources#<span style="background:#83fafc">show</span></td></tr><tr><td></td><td>PATCH</td><td>&#x2F;resources&#x2F;:id(.:format)</td><td>resources#update</td></tr><tr><td></td><td>PUT</td><td>&#x2F;resources&#x2F;:id(.:format)</td><td>resources#update</td></tr><tr><td></td><td>DELETE</td><td>&#x2F;resources&#x2F;:id(.:format)</td><td>resources#destroy</td></tr></tbody></table><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命名規則</span></span><br><span class="line">/resources</span><br><span class="line">/resources/action</span><br><span class="line">/resources/<span class="symbol">:id</span></span><br><span class="line">/resources/<span class="symbol">:id/action</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 命名範例</span></span><br><span class="line">/products</span><br><span class="line">/products/new</span><br><span class="line">/products/<span class="number">123</span></span><br><span class="line">/products/<span class="number">123</span>/edit</span><br></pre></td></tr></table></figure><hr><p>參考資料：</p><ul><li><a href="https://www.cloudflare.com/zh-tw/learning/security/threats/cross-site-scripting/">什麼是跨網站指令碼？</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ruby </tag>
            
            <tag> rails </tag>
            
            <tag> restful api </tag>
            
            <tag> routes </tag>
            
            <tag> http verb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>個人部落格架設-2 | Hexo 管理 markdown 文章</title>
      <link href="/posts/hexo/"/>
      <url>/posts/hexo/</url>
      
        <content type="html"><![CDATA[<p>使用 Hexo 可以自動套用主題樣式並部屬靜態網頁到 GitHub Pages，搭配 markdown 語法撰寫文章，能夠節省許多網頁製作的時間。</p><table><thead><tr><th>優點</th><th>缺點</th></tr></thead><tbody><tr><td>更新快速</td><td>必須學習 markdown。</td></tr><tr><td>版面簡單乾淨</td><td>風格單調、制式化。<br>或是必須勤於撰寫 CSS。</td></tr></tbody></table><h2 id="用-markdown-撰寫文章"><a href="#用-markdown-撰寫文章" class="headerlink" title="用 markdown 撰寫文章"></a>用 markdown 撰寫文章</h2><p><a href="https://markdown.com.cn/basic-syntax/emphasis.html">markdown</a>語法是一種語法規格，可以使用任何編輯器編寫。而我是使用 vscode 搭配 markdown 的擴充套件，因為可以省去學習新工具的時間，以及省去下達 Hexo 指令時需要切換工具的時間。</p><table><thead><tr><th>VScode 擴充工具推薦</th><th>用途</th></tr></thead><tbody><tr><td>Markdown All in One</td><td>綜合的 markdown 語法工具，功能繁多不及備載。</td></tr><tr><td>Markdown Paste</td><td>將複製的資料，以 markdown 語法貼上。</td></tr><tr><td>Markdown Preview Enhanced</td><td>預覽 markdown 語法檔案的效果。</td></tr><tr><td>Markdown Preview Github Styling</td><td>以 GitHub 樣式預覽 markdown 語法檔案的效果。</td></tr><tr><td>Markdown Table Prettifier</td><td>在編寫 markdown 語法中的表格時，依據表格內容對齊欄位寬度。</td></tr></tbody></table><h2 id="用-Hexo-管理與維護網站"><a href="#用-Hexo-管理與維護網站" class="headerlink" title="用 Hexo 管理與維護網站"></a>用 Hexo 管理與維護網站</h2><p><a href="https://hexo.io/zh-tw/index.html">Hexo</a>是我在 Windows 系統下唯一順利安裝的 GitHub Pages 部屬工具，相關的教學文章即影片也更豐富。其他的管理工具大多建議搭配 MacOS 使用，並不符合我的作業環境。</p><blockquote><p><strong>挑選文章管理輔助工具：</strong><br>管理的工具有非常多種，而我最後選擇的是 Hexo，因為他是我找到唯一技術文件有簡體中文版本的文章管理輔助工具。</p><ul><li><a href="https://jekyllrb.com/">Jekyll</a>：搭配 Ruby。<ul><li><a href="https://www.youtube.com/watch?v=5z7_qp0CWBY">教學影片–Jekyll on Windows - And Github Pages Hosting</a></li></ul></li><li><a href="http://octopress.org/">Octopress</a></li><li><a href="https://gohugo.io/">Hugo</a>：搭配 Go。</li><li><a href="https://www.youtube.com/watch?v=s1O-8zhPQmU">教學影片–Building a custom site with Hugo on GitHub</a><ul><li>推薦主題：<ol><li><a href="https://themes.gohugo.io/themes/lotusdocs/">Lotus Docs</a></li><li><a href="https://themes.gohugo.io/themes/hugo-theme-relearn/">Relearn</a></li></ol></li></ul></li></ul></blockquote><h3 id="安裝-Hexo"><a href="#安裝-Hexo" class="headerlink" title="安裝 Hexo"></a>安裝 Hexo</h3><p>依照官方文件進行<a href="https://hexo.io/zh-tw/docs/">安裝</a>。</p><ol><li>在確保環境中已安裝 node.js 和 git 的情況下，安裝 hexo：<code>$ npm install -g hexo-cli</code></li><li>新建專案資料夾，並讓終端機進入路徑。</li><li>初始化 hexo 專案：<code>$ hexo init</code></li><li>安裝 hexo 必要套件：<code>$ npm install</code></li><li>開啟 server，確認專案是否順利建立：<code>$ hexo s</code></li></ol><h3 id="將-Hexo-專案部署到-GitHub-Pages"><a href="#將-Hexo-專案部署到-GitHub-Pages" class="headerlink" title="將 Hexo 專案部署到 GitHub Pages"></a>將 Hexo 專案部署到 GitHub Pages</h3><p>根據<a href="https://hexo.io/zh-tw/docs/github-pages#%E4%B8%80%E9%8D%B5%E9%83%A8%E5%B1%AC">官方文件</a>，使用一鍵部屬。</p><ol><li>安裝<a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>：<code>$ npm install hexo-deployer-git --save</code></li><li>設定 <code>\_config.yml</code> 檔案中的部屬設定：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: &#x27;git&#x27;</span><br><span class="line">  repo: https://github.com/&lt;username&gt;/&lt;project&gt;</span><br><span class="line">  # example, https://github.com/hexojs/hexojs.github.io</span><br><span class="line">  branch: gh-pages</span><br></pre></td></tr></table></figure><ol start="3"><li>清空發布的檔案： <code>$ hexo clean</code></li><li>建置要發布的檔案： <code>$ hexo deploy</code></li><li>瀏覽自己的 Github Pages 頁面 <code>&lt;GitHub 用戶名&gt;.github.io</code>，檢查網站是否順利部屬。</li></ol><blockquote><h4 id="修改文章永久連結-Permalink"><a href="#修改文章永久連結-Permalink" class="headerlink" title="修改文章永久連結 (Permalink)"></a>修改文章<a href="https://hexo.io/zh-tw/docs/permalinks.html">永久連結</a> (Permalink)</h4><p>在 Hexo 的 <code>_config.yml</code> 中，預設的文章路徑 <code>permalink</code> 為 <code>:year/:month/:day/:title/</code>，會將文章的 url 設定為類似 <code>2013/07/14/hello-world/</code> 的結果。但是我希望路徑能夠固定，所以我將 permalink 設定為 <code>permalink: &quot;posts/:name/&quot;</code>，就會在每篇文章的路徑前加上 <code>post/</code>，並且以檔案名稱作為最後路徑。搭配<a href="https://hexo.io/docs/tag-plugins#Include-Assets">標籤外掛</a> (Tag Plugins)，能將網頁設定的資料作為變數自動更新，有利於未來更換網域時的轉換，也能快速連結自己的相關文章。</p></blockquote><h3 id="使用-Hexo-管理與更新文章"><a href="#使用-Hexo-管理與更新文章" class="headerlink" title="使用 Hexo 管理與更新文章"></a>使用 Hexo 管理與更新文章</h3><p>每次的更新流程：</p><ol><li><code>hexo cl</code>： clean，清除所建立的靜態檔案。</li><li><code>hexo g</code>： generate，建立 public folder 中的靜態檔案。<br>(可省略的步驟，執行 <code>hexo d</code> 將會自動執行 <code>hexo g</code>)</li><li><code>hexo s</code>： server，本機端查看渲染效果。</li><li><code>hexo d</code>： deploy，部署到 Github Pages。</li></ol><p>每次更新到後，需要等待約 1 分鐘，Github Pages 才會更新。</p><h3 id="套用與變更-Hexo-網站主題"><a href="#套用與變更-Hexo-網站主題" class="headerlink" title="套用與變更 Hexo 網站主題"></a>套用與變更 Hexo 網站主題</h3><p>在 Hexo 官網的<a href="https://hexo.io/themes/">主題頁面</a>中，有多種開源主題可供挑選，未來有能力也可以主動分享 😊<br>找到喜歡的主題後，每個主題通常都會有安裝說明，只需要按照主題問件進行安裝即可。<br>通常的主題安裝流程：</p><ol><li>下載主題檔案：<code>$ git clone &#39;主題網址&#39;</code></li><li>安裝主題必須的套件： <code>$ npm init</code></li><li>建立主題專屬的 <code>_config.主題名稱.yml</code><ol><li>進入 <code>themes</code> 資料夾，複製 <code>_config.yml</code> 到專案最外層</li><li>更名為 <code>_config.主題名稱.yml</code><br>(以後要修改此樣式的專屬設定，就在這裡變更資料)</li></ol></li><li>更改在外層的初始 <code>_config.yml</code> 中的 <code>theme: 主題樣式名稱</code>，輸入要套用的主題樣式名稱<br>(主題樣式名稱，可參考 <code>themes</code> 資料夾中安裝的主題資料夾名稱)</li></ol><table><thead><tr><th>編號</th><th>推薦樣式 (依照主題複雜度排列)</th></tr></thead><tbody><tr><td>1</td><td><a href="https://github.com/zchengsite/hexo-theme-oranges">Oranges</a></td></tr><tr><td>2</td><td><a href="https://github.com/adisaktijrs/hexo-theme-minima">Minima</a></td></tr><tr><td>3</td><td><a href="https://github.com/zhwangart/hexo-theme-ocean">Ocean</a></td></tr><tr><td>4</td><td><a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a></td></tr><tr><td>5</td><td><a href="https://github.com/saicaca/hexo-theme-vivia">Vivia</a></td></tr><tr><td>6</td><td><a href="https://github.com/HyunSeob/hexo-theme-overdose">Overdose</a></td></tr><tr><td>7</td><td><a href="https://github.com/iTimeTraveler/hexo-theme-hiero">Hiero</a></td></tr><tr><td>8</td><td><a href="https://github.com/iTimeTraveler/hexo-theme-hipaper">Hipaper</a></td></tr></tbody></table><hr><p>參考資料：</p><ul><li><a href="https://www.youtube.com/watch?v=erKYtw4Rfhk&ab_channel=CodeSheep%E7%A8%8B%E5%BA%8F%E7%BE%8A">手把手教你从 0 开始搭建自己的个人博客</a></li><li><a href="https://www.zhihu.com/tardis/zm/art/103348449?source_id=1003">测试了 25 款 Markdown 编辑器，推荐 3 个最好用的！</a></li><li><a href="https://viiisit.com/posts/github-pages-with-custom-domain/">Custom Domain - 從零到有，成功建置 viiisit.com!</a>，viii</li><li><a href="https://www.youtube.com/watch?v=PsXWbI2Mqu0&list=PLX5Mjj7M-ojmiOJQDUNNyPRY1xlajVEYD&index=1&ab_channel=%E5%91%A8%E4%B8%89Tech">Hexo 影片教學系列</a>，周三 Tech</li><li><a href="https://orandigo.github.io/blog/2020/03/01/20200301-hexo/">Hexo</a>，前端筆記</li><li><a href="https://www.youtube.com/watch?v=7YDuIhDR16w&list=PLIN0r_kqXu-7_S4sg1gDkzdkCLzWXoPBf&ab_channel=%E6%88%91%E4%B8%8D%E6%98%AF%E5%92%95%E5%92%95%E9%B8%BD">文章管理輔助工具比較</a>，我不是咕咕鴿</li><li><a href="https://markdown.com.cn/basic-syntax/emphasis.html">Markdown 官方教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 個人部落格架設 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
            <tag> github-pages </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RoR | rails 專案的建立 &amp; 設置</title>
      <link href="/posts/ruby-on-rails-new-project/"/>
      <url>/posts/ruby-on-rails-new-project/</url>
      
        <content type="html"><![CDATA[<p>rails 專案中，有幾個必須認識的檔案名稱，以及需要了解的用途。</p><ul><li>config 設定檔</li><li>lib 函式庫</li><li>app 執行檔<ul><li>controllers</li><li>module</li><li>views</li><li>assets 附件<ul><li>image</li><li>stylesheet<ul><li>css</li></ul></li></ul></li></ul></li></ul><h2 id="新建-rails-專案"><a href="#新建-rails-專案" class="headerlink" title="新建 rails 專案"></a>新建 rails 專案</h2><h3 id="選擇-JS-打包工具-CSS-框架"><a href="#選擇-JS-打包工具-CSS-框架" class="headerlink" title="選擇 JS 打包工具 &amp; CSS 框架"></a>選擇 JS 打包工具 &amp; CSS 框架</h3><p>在新建專案時，建議以 esbuild 作為 js 打包工具，並且以 tailwind 作為 css 框架。</p><ul><li>Rails 專案建置指令： <code>$ rails new project-name -j esbuild -c tailwind</code><br>(rails 預設的 js 打包工具為 importmap)</li></ul><blockquote><h4 id="使-tailwind-生效"><a href="#使-tailwind-生效" class="headerlink" title="使 tailwind 生效"></a>使 tailwind 生效</h4><ol start="0"><li>如果伺服器中，網頁樣式經過 reset，代表已順利安裝 tailwind。</li><li>在專案中執行 <code>$ yarn</code>，安裝 <code>package.json</code> 中的套件。</li><li>在專案中執行 <code>$ bin/dev</code>，將會執行 din 資料夾中的 dev 檔案。<br>檔案中最後一列，執行動作為「執行 Procfile.dev 中的指令」。</li></ol></blockquote><h3 id="安裝-gem-bundle-rackup"><a href="#安裝-gem-bundle-rackup" class="headerlink" title="安裝 gem &amp; bundle &amp; rackup"></a>安裝 gem &amp; bundle &amp; rackup</h3><p>在前端開發中，可以使用 node http 開啟伺服器。而在 rails 專案中，可以使用 rackup 開啟伺服器。rackup 的伺服器運作時，將會回傳 request 的執行結果。結果的資料型態分別為 int 、 hash 以及 array，分別記錄 status、header 以及回應結果的 html。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用 node http 建立伺服器</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line">http</span><br><span class="line">  .<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">listem</span>(<span class="number">8888</span>);</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建立並在 `config.ru`檔案中放入以下程式碼，而後以 `rackup` 建立伺服器。</span></span><br><span class="line">run <span class="keyword">do</span> |<span class="params">env</span>|</span><br><span class="line">    [<span class="number">200</span>, &#123;&#125;, [<span class="string">&quot;Hello Ruby&quot;</span>]]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ol><li>安裝 bumdle<ol><li><code>$ sudo chmod +x *.bundle</code></li><li><code>$ sudo ./*.bundle</code></li></ol></li><li>安裝 grm：<code>$ gem install</code></li><li>以 bundle 安裝 gem 套件<br>(如果 Gemfile.lock 不存在，將在 <code>$ bundle</code> 的所有指令執行時，自動安裝。)<ol><li>根據 Gemfile 內容，安裝設定的套件：<code>$ bundle install</code><br>(<code>$ bundle install</code>的運作底層邏輯，仍為 <code>$ gem install</code>)</li><li>根據指令指定的內容，將套件加入 Gemfile 的套件列表，並安裝：<code>$ bundle add</code></li><li>根據指令指定的內容，安裝套件：<code>$ bundle update 套件名稱</code></li></ol></li><li>安裝 rackup<ol><li>進入 rackup 官網，下載並安裝 rackup。</li><li>執行 <code>$ rackup</code>，確認 rackup 能夠順利運行。</li></ol></li></ol><blockquote><h4 id="什麼是伺服器-server-？-rackup-的用途？"><a href="#什麼是伺服器-server-？-rackup-的用途？" class="headerlink" title="什麼是伺服器(server)？ rackup 的用途？"></a>什麼是伺服器(server)？ rackup 的用途？</h4><p>伺服器是一種<a href="https://zh.wikipedia.org/zh-tw/%E8%AF%BB%E5%8F%96-%E6%B1%82%E5%80%BC-%E8%BE%93%E5%87%BA%E5%BE%AA%E7%8E%AF">無限循環</a>的軟體，而不是特定種類的硬體計算機，只是軟體必定乘載於硬體。軟體工程師的工作就是將程式碼設置於 server，提供使用者觀看與使用。而常見的 server 軟體有 Apache 以及 nginx，優點是在靜態頁面的傳輸上效能高，缺點是無法識別後端程式碼，因此在傳輸時會連同後端原始碼一起傳輸，可能造成機密外洩。為了解決這個問題，需要另外安裝 mod (modular) 套件，會將原始碼轉譯為 html 後再供使用者下載。 rackup 就是 rails 預設的 mod，可以防止開發的原始碼外洩。</p></blockquote><h3 id="設置-Gemfile-Gemfile-lock"><a href="#設置-Gemfile-Gemfile-lock" class="headerlink" title="設置 Gemfile &amp; Gemfile.lock"></a>設置 Gemfile &amp; Gemfile.lock</h3><p>在 rails 專案中，可以在最外層找到名為 Gemfile 以及 Gemfile.lock 的兩個檔案。Gemfile 是 gem 套件安裝時的依據，就像 node.js 專案中的 package.json，並且將套件分為運行用套件 (runtime)、開發用套件 (development) 和測試用套件 (test) 。在打包專案時，可以依照用途打包最少的資料，藉此提升效能。而 Gemfile.lock 則是記錄套件相依性的依據，解決開源軟體之間常見的版本衝突。藉由 Gemfile.lock 中所記錄的相依性資訊，可以限制版本自動更新的範圍。</p><blockquote><h4 id="版本常見命名規則說明"><a href="#版本常見命名規則說明" class="headerlink" title="版本常見命名規則說明"></a>版本常見命名規則說明</h4><p>在 Gemfile 以及 Gemfile.lock 中，如果沒有指定版本，將預設安裝最新版。但每個版本差異不定，可以依據命名方式了解大致的軟體更新狀況。語意化版本號可以細分為主板號、次版號以及修訂號，分別在重大更新、有新功能以及部分除錯時提升。</p><p><img src="/images/ruby-on-rails-new-project/ruby-on-rails-new-project_2023-11-24-09-03-22.png"></p><ul><li><code>~&gt; 3.1.7</code>：高於 3.1.7，低於 3.2.0 (更新到最新的 patch)</li><li><code>&gt; 3.1.7</code>：高於 3.1.7 (等於最新版)</li><li><code>3.1.7</code>：限定 3.1.7 版本</li><li>RC (Release Candidate)：候選版本，近完成品、幾乎不會改動。</li><li>Beta：公測版，只有部分的測試者能夠使用，並且後續可能有重大更新。</li></ul></blockquote><h2 id="MVC-架構專案雛形設置"><a href="#MVC-架構專案雛形設置" class="headerlink" title="MVC 架構專案雛形設置"></a>MVC 架構專案雛形設置</h2><p>Rails 專案的運作方式採用 MVC 架構，專案頁面建立的簡易步驟如下：</p><p><img src="/images/ruby-on-rails-new-project/ruby-on-rails-new-project_2023-11-24-09-04-02.png"></p><ol><li>新增路由<ol><li>在 routes.rb 中，新增路由。<ul><li>建立根目錄：<code>root#index</code></li><li>建立頁面：<code>get &#39;page-name&#39;,to: &#39;pages#page-name</code><br>(<code>page-name</code> 即網頁路徑，<code>pages#page-name</code> 則是 controller#action，通常對應到同名的 view 檔案。)</li></ul></li></ol></li><li>建立 controller<ol><li>建立指定系統的 controller：<code>$ rails g controller pages</code><br>(<code>$ rails g</code> 是 <code>$ rails generate</code> 的縮寫)<ul><li>建立 controller 檔案</li><li>建立 view 資料夾中的 pages 資料夾</li><li>建立測試用檔案 (目前先不會用到)</li><li>建立 helper 小幫手 (目前先不會用到)</li></ul></li><li>根據設定的網頁路徑，新增 action <code>def about end</code> 在 <code>class PagesController &lt; ApplicationController ... end</code> 中。<br>(如果路徑設定與 view 的檔案名稱相同，可以省略。但不建議省略，因為可能導致識別困難)</li></ol></li><li>建立 view (頁面)<ol><li>在 views 資料夾中的 <code>pages</code> 建立名為 <code>page-name.html.erb</code> 的檔案。</li></ol></li><li>確認建立成果，開啟伺服器：<code>$ rails s</code></li></ol><blockquote><h3 id="檔案-類別命名規則"><a href="#檔案-類別命名規則" class="headerlink" title="檔案 &amp; 類別命名規則"></a>檔案 &amp; 類別命名規則</h3><p>ruby 中，類別名稱必須為常數，以大駝峰的方式命名。而在 rails 專案中，建立的 MVC 物件，皆用蛇式命名。</p><ul><li>controller： 在 <code>app/controller/resource_controller.rb</code> 中，類別名稱為 <code>ResourceController</code>。<br>(繼承 class ApplicationController &lt; ActionController::Base，可以在其中添加所有 Controller 會用到的 action。)</li><li>model：在 <code>app/models/resource.rb</code>，類別名稱 <code>Resource &lt; ApplicationRecord</code>。其中的 表格 (table) 名稱則為 <code>resources</code>，為「複數」型態。</li></ul></blockquote><h3 id="過程除錯"><a href="#過程除錯" class="headerlink" title="過程除錯"></a>過程除錯</h3><p>設置專案的過程中，有以下 5 種可能的錯誤提示，請試著根據錯誤提示回推除錯方法。</p><ol><li>❓ node.js 未安裝、yarn 未安裝，或是 yarn 安裝錯誤：<br>✅ 解決方法請看上一篇「RoR | 用 RVM 安裝 Ruby，用 Gem 安裝 Rails」。<br><img src="/images/ruby-on-rails-new-project/ruby-on-rails-new-project_2023-11-24-09-04-17.png"></li><li>❓ 在 routes.rb 中，未建立路由，或是路徑錯誤：<br>✅ 在 routes.rb 中，建立路由 <code>get &#39;page-name&#39;,to: &#39;pages#page-name</code>，或是建立根目錄 <code>root#index</code>。<br><img src="/images/ruby-on-rails-new-project/ruby-on-rails-new-project_2023-11-24-09-04-27.png"></li><li>❓ 未建立與 routes.rb 中相對應的 controller：<br>✅ 輸入指令，建立 controller：<code>$ rails g controller pages</code><br><img src="/images/ruby-on-rails-new-project/ruby-on-rails-new-project_2023-11-24-09-04-38.png"></li><li>❓ 在 controller 中，未建立 action：<br>✅ 在 controller 中，建立 action <code>def about end</code> 在 <code>class PagesController &lt; ApplicationController ... end</code> 中。<br><img src="/images/ruby-on-rails-new-project/ruby-on-rails-new-project_2023-11-24-09-04-54.png"></li><li>❓ 未建立 view：<br>✅ 在 views 資料夾中的 <code>pages</code> 建立名為 <code>page-name.html.erb</code> 的檔案。<br><img src="/images/ruby-on-rails-new-project/ruby-on-rails-new-project_2023-11-24-09-05-03.png"></li></ol><hr><p>參考資料：</p><ul><li><a href="https://railsbook.tw/chapters/09-using-gems">使用套件（Gem）讓開發更有效率</a>，為你自己學 Ruby on Rails</li><li><a href="https://kaochenlong.com/2016/04/29/where-are-the-installed-gems/">gem install 之後，那些 gem 安裝到哪裡去了?</a>，高見龍</li><li><a href="https://medium.com/lynns-dev-blog/rails-%E6%96%B0%E6%89%8B%E6%9D%91-bundle-install-%E5%92%8C-gem-install-%E7%9A%84%E5%B7%AE%E5%88%A5-bd416ee8b2eb">Rails — bundle install 和 gem install 的差別</a>，涓</li><li><a href="https://railsbook.tw/extra/rack">為你自己學 Ruby on Rails</a></li><li><a href="https://www.jianshu.com/p/eaaa6d71f8c6">pod 使用指定版本</a>Gemfile.lock 版本的指定參考，AnnieAri</li><li><a href="https://semver.org/lang/zh-TW/">語意化版本 2.0.0</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ruby </tag>
            
            <tag> rails </tag>
            
            <tag> mvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RoR | 用 RVM 安裝 Ruby，用 Gem 安裝 Rails</title>
      <link href="/posts/ruby-on-rails-install-rvm/"/>
      <url>/posts/ruby-on-rails-install-rvm/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/ruby-on-rails-install-rvm/ruby-on-rails-install-rvm_2023-11-24-09-02-16.png"></p><p>RVM 是一個針對 Ruby 的版本管理工具，而 Gem 是 Ruby 套件的管理工具。就像 NVM 之於 Node.js，npm 之於 Node.js。利用這兩個工具，可以更加快速地完成 Ruby on rails (RoR) 的執行與開發環境建立。</p><h2 id="使用-macOS-順利安裝"><a href="#使用-macOS-順利安裝" class="headerlink" title="使用 macOS 順利安裝"></a>使用 macOS 順利安裝</h2><p>使用蘋果電腦進行 RoR 的環境建置時，相比 Windows Subsystem Linux (WSL) 要簡單許多。而如果你像我一樣，使用的是 WSL 環境使用 RoR，就需要了解下一章如何處理子系統的細節。</p><h3 id="安裝-RVM"><a href="#安裝-RVM" class="headerlink" title="安裝 RVM"></a>安裝 RVM</h3><p>Ruby Version Manager (RVM) 是一個 Ruby 版本管理工具，能夠在管理一個環境下安裝的多個不同版本的 Ruby。操作方式簡單，只需要依照官網運作三行指令即可。</p><ol><li>安裝 GPG 金鑰：<code>gpg2 --keyserver keyserver.ubuntu.com --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB</code></li><li>安裝 RVM：<code>\curl -sSL https://get.rvm.io | bash -s stable</code></li></ol><h3 id="安裝-Ruby"><a href="#安裝-Ruby" class="headerlink" title="安裝 Ruby"></a>安裝 Ruby</h3><ol><li>查看已安裝的 Ruby 版本： <code>rvm list</code></li><li>查看已知(可安裝)的 Ruby 版本： <code>rvm list known</code><br>(查看可安裝的最新版本)</li><li>安裝 Ruby：<code>rvm install 3.0.0</code><br>(在 install 後方的數字填入版本號)<ol><li>輸入 WSL 密碼</li><li>檢查安裝版本：<code>ruby -v</code></li></ol></li></ol><blockquote><p>如果無法順利安裝 Ruby，可以試試 <code>ruby reinstall 3.2.2</code>，看看能不能順利安裝。</p></blockquote><h3 id="安裝-Rails"><a href="#安裝-Rails" class="headerlink" title="安裝 Rails"></a>安裝 Rails</h3><p><a href="https://rubygems.org/?locale=zh-TW">RubyGems</a>類似於 node.js 中的 npm 的套件管理工具。</p><ol><li>安裝 rails：<code>gem install rails</code><ol><li>也可以指定 rails 的安裝版本：<code>gem install rails -v 5.2.3</code></li><li>也可以指定安裝 rails 的先行版：<code>gem install rails --pre</code></li></ol></li><li>檢查 rails 的安裝版本，了解是否安裝成功：<code>rails -v</code></li><li>建立專案<ol><li>指定專案建立的檔案路徑：<code>cd /mnt/c/...</code></li><li>建立 rails 專案：<code>rails new hello-rails</code><br>(在 rails new 後方填上新生成的專案名稱)</li><li>查看檔案：<code>ls -al</code></li><li>進入專案路徑：<code>cd hello-rails/</code></li><li>查看 rails 專案 server：<code>rails s</code><br>(完整指令為：<code>rails server</code>)</li></ol></li></ol><h2 id="處理-WSL-環境問題"><a href="#處理-WSL-環境問題" class="headerlink" title="處理 WSL 環境問題"></a>處理 WSL 環境問題</h2><p>使用 WSL 環境時，必須注意子系統中是否安裝 Node.js 以及 npm。如果 npm 的版本過舊，就需要安裝 nvm 用以將 npm 更新到最新版本。另外，建立 rails 專案時，必須使用 esbuild 作為 js 打包工具，才能順利運作 rails 的伺服器。</p><ul><li>Rails 專案建置指令： <code>rails new project-name -j esbuild -c tailwind</code><br>(rails 預設的 js 打包工具為 importmap)</li></ul><h3 id="檢查及安裝-Node-js-nvm-npm-yarn"><a href="#檢查及安裝-Node-js-nvm-npm-yarn" class="headerlink" title="檢查及安裝 Node.js &amp; nvm &amp; npm &amp; yarn"></a>檢查及安裝 Node.js &amp; nvm &amp; npm &amp; yarn</h3><p>首先，檢查環境中目前的軟體版本，包刮 Node.js、nvm、npm 和 yarn。傳新安裝完成後，也要用 <code>-v</code> 或 <code>--version</code> 查看目前環境中的版本，重新檢查是否安裝成功。</p><ul><li><p>檢查環境中既有版本</p><ol><li><code>node -v</code></li><li><code>npm -v</code></li><li><code>nvm -v</code><ol><li><code>nvm list</code></li></ol></li><li><code>yarn -v</code></li></ol></li><li><p>安裝缺失軟體 &amp; 更新軟體</p><ol><li>從 <a href="https://nodejs.org/en/">Node.js 官網</a> 下載 node.js<br>(npm 會跟著 node.js 一起被安裝)</li><li>從 <a href="https://github.com/nvm-sh/nvm">nvm</a> 下載並安裝 nvm</li><li>用 nvm 更新 npm 版本： <code>nvm install 16.20.0</code></li><li>用 npm 安裝 yarn： <code>npm install --global yarn</code></li></ol></li></ul><h3 id="rails-專案的建置與刪除"><a href="#rails-專案的建置與刪除" class="headerlink" title="rails 專案的建置與刪除"></a>rails 專案的建置與刪除</h3><p>在處理 RoR 環境時，因為需要重複建立專案以確認環境是否安全，所以會重複建立專案。過程中，如果將既有專案刪除，並且建立同名檔案，可能會出現錯誤並且建立失敗。如果藉由 Windows 檔案管理直接刪除檔案，可能因為快取殘留，而無法建立同名專案。但如果是在終端機以 <code>rm -r project-name</code> 刪除專案，將不會出現因此在建立專案時出現錯誤。</p><ul><li>確認 application 系列檔案安裝成功<ol><li>application.js</li><li>application.tailwind.css</li></ol></li></ul><hr><p>參考資料：</p><ul><li><a href="https://rvm.io/">RVM</a></li><li><a href="https://medium.com/lynns-dev-blog/rails-%E6%96%B0%E6%89%8B%E6%9D%91-bundle-install-%E5%92%8C-gem-install-%E7%9A%84%E5%B7%AE%E5%88%A5-bd416ee8b2eb">Rails — bundle install 和 gem install 的差別</a></li><li><a href="https://github.com/rubocop/ruby-style-guide">Ruby Style Guide</a></li><li><a href="https://replit.com/">replit</a></li><li><a href="https://yarn.bootcss.com/docs/install/index.html#windows-stable">yarn 的安裝</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ruby </tag>
            
            <tag> rails </tag>
            
            <tag> linux </tag>
            
            <tag> wsl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMX | 建立 WSL (Windows subsystem Linux)</title>
      <link href="/posts/vmx-wsl/"/>
      <url>/posts/vmx-wsl/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/vmx-wsl/vmx-wsl_2023-11-24-09-01-03.png"></p><p>Ubuntu 和 macOS 都是 Linux 作業系統的一種，比起 Windows，才能順利運作 Ruby on Rails。至於其他還有哪些差異，可以再多多研究。</p><blockquote><h2 id="subsystem-子系統-和-VM-虛擬機器平台-的差異？"><a href="#subsystem-子系統-和-VM-虛擬機器平台-的差異？" class="headerlink" title="subsystem (子系統) 和 VM (虛擬機器平台) 的差異？"></a>subsystem (子系統) 和 VM (虛擬機器平台) 的差異？</h2><p>子系統是在 Windows 作業系統中運行的子系統，可以利用終端機進入其他作業系統的執行環境。而虛擬機器平台是獨立於 Windows 的作業系統，無法快速切換程式碼的運作環境，但是當作另外的儲存庫非常實用。如果想要將資料連同作業環境複製給他人，就可以藉由複製虛擬機器平台實現。<br>不過現在這個用途，似乎用 Docker 技術可以更有效率的管理資料。</p></blockquote><h2 id="開啟-VMX-Windows-虛擬化設定"><a href="#開啟-VMX-Windows-虛擬化設定" class="headerlink" title="開啟 VMX (Windows 虛擬化設定)"></a>開啟 VMX (Windows 虛擬化設定)</h2><p>要開啟 VMX (Windows 虛擬化設定)，只需要兩個步驟。一個是啟用 BIOS 的 Intel virtualization，另一個是安裝 Windows 的虛擬機器平台，準備好安裝 WSL 的環境。</p><h3 id="開啟-BIOS-的-VMX-功能"><a href="#開啟-BIOS-的-VMX-功能" class="headerlink" title="開啟 BIOS 的 VMX 功能"></a>開啟 BIOS 的 VMX 功能</h3><p>其實，BIOS 的 Intel virtualization 是預設開啟的，如果過去沒有自行修改設定，可以跳過這個步驟。</p><ul><li><p>進入 BIOS (或 UEFI) 共用程式</p><ol><li>儲存並關閉所有應用程式。</li><li>設定 &gt; 進階啟動 &gt; 立即重新啟動</li><li>盡如重新啟動的藍色畫面<ol><li>疑難排解 &gt; 進階選項 &gt; UEFI 韌體設定</li><li>重新啟動以變更 UEFI 韌體設定</li></ol></li></ol></li><li><p>開啟 BIOS 的 VMX 功能</p><ol><li><code>F7</code> 切換到高階模式</li><li>advanced &gt; Intel virtualization &gt; Enabled</li></ol></li></ul><h3 id="開啟-Windows-的虛擬機器平台"><a href="#開啟-Windows-的虛擬機器平台" class="headerlink" title="開啟 Windows 的虛擬機器平台"></a>開啟 Windows 的虛擬機器平台</h3><p>在 Windows 系統的搜尋欄位查找，就可以找到這個應用程式，進行系統設定。</p><ul><li>開啟 Windows 的虛擬機器平台<ol><li>開啟「開啟或關閉 Windows 功能」</li><li>勾選「Windows 子系統 Linux 版」以及「虛擬機器平台」 &gt; 確定 &gt; 立即重新啟動<br>(也可以用系統管理員開啟 PowerShell，並且輸入 <code>Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</code> 以開啟「Windows 子系統 Linux 版」。但是我不知道開啟「虛擬機器平台」的指令。)</li></ol></li></ul><h2 id="安裝-Ubuntu"><a href="#安裝-Ubuntu" class="headerlink" title="安裝 Ubuntu"></a>安裝 Ubuntu</h2><ol><li>開啟 Windows store</li><li>搜尋並安裝 Ubuntu</li><li>❗ 直接開啟 Ubuntu 的終端機<br>(不要用 Windows 的 Terminal &gt; 切換 Ubuntu)</li><li>設定使用者名稱</li><li>設定使用者密碼<br>(為了安全起見，密碼不會顯示，字還是有打喔！)</li></ol><blockquote><h3 id="使用-WSL"><a href="#使用-WSL" class="headerlink" title="使用 WSL"></a>使用 WSL</h3><p>Ubuntu 安裝完成後，子系統並非獨立於 Windows 的資料儲存空間，而是藉由「鏡射」的方式，查看 Windows 系統中的資料儲存。開啟 Ubuntu 之後，檔案路徑中的 <code>mut/c</code> 就是鏡射到 Windows 系統中的 <code>C:</code>。</p></blockquote><hr><p>參考資料：</p><ul><li><a href="https://support.microsoft.com/zh-tw/windows/%E5%9C%A8-windows-11-%E9%9B%BB%E8%85%A6%E4%B8%8A%E5%95%9F%E7%94%A8%E8%99%9B%E6%93%AC%E5%8C%96-c5578302-6e43-4b4b-a449-8ced115f58e1">在 Windows 11 電腦上啟用虛擬化</a></li><li><a href="https://learn.microsoft.com/zh-tw/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package">舊版 WSL 的手動安裝步驟</a></li><li>五倍紅寶石學院 ASTRO Camp 線上課程</li><li><a href="https://aws.amazon.com/tw/compare/the-difference-between-docker-vm/">Docker 與 VM 之間有何區別？</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> wsl </tag>
            
            <tag> vm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML | 標籤結構 &amp; 切版設計</title>
      <link href="/posts/html-structure/"/>
      <url>/posts/html-structure/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/html-structure/html-structure_2023-11-24-08-59-27.png"></p><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/HTML">HTML</a> （HyperText Markup Language，超文本標記語言）是前端三大語言之一，是網頁內容的主體。它的語意結構將關係到 SEO 搜尋結果，是改善「搜尋引擎最佳化」的關鍵。同時，也是設計「<a href="https://accessibility.moda.gov.tw/Download/Detail/1419?Category=28">無障礙網站</a>」時需要精心安排的重點。透過 <a href="https://pagespeed.web.dev/">PageSpeed Insight</a> 可以了解特定網站的優劣，檢測「效能、無障礙功能、最佳做法、搜尋引擎最佳化」四個指標，更可以查找<a href="https://developers.google.com/speed/docs/insights/v5/about?hl=zh-tw">文件</a>了解改善方向。</p><h2 id="建構-HTML-的步驟"><a href="#建構-HTML-的步驟" class="headerlink" title="建構 HTML 的步驟"></a>建構 HTML 的步驟</h2><p>為了提升 HTML 的建構效率，建議將 HTML 結構模組化，避免檢查結構時可能的混亂。首先，設定容器時，建議將每個章節分為 header 、 .content 以及 footer。(如果沒有相關內容，可以省略)其次，才依照功能及內容，選擇相符的標籤，填入先前建立的容器中。</p><ol><li>設定容器<ol><li>語意結構標籤</li><li>無語意結構標籤</li></ol></li><li>設定功能與內容<ol><li>功能</li><li>內容</li></ol></li></ol><h3 id="1-設定容器"><a href="#1-設定容器" class="headerlink" title="1. 設定容器"></a>1. 設定容器</h3><p>結構標籤沒有特殊功能，主要是將有關連的內容群組化，並且幫助 SEO 分辨內容類別。</p><ul><li>語意容器<ul><li>結構<ul><li>header 頂端，大多放作者名稱、LOGO、搜尋欄</li><li>footer 末端，大多放作者、版權、文件相關連結</li></ul></li><li>內容<ul><li>main 主要，沒有和其他頁面重複的內容</li><li>aside 另外，和主要內容無關 &#x2F; 間接相關的內容</li><li>nav: navigation 選單，設置多個連結，大多放側邊欄、頁面導覽、麵包屑</li></ul></li><li>內容類型<ul><li>article 文章，獨立結構的 post 或新聞文章</li><li>section 章節，通用的分段結構，多用在搜尋結果、地圖顯示、控制項等。</li></ul></li></ul></li><li>無語意容器<ul><li>div: division，群組標籤用的工具</li><li>span，用於內文重要性的視覺化外觀控制</li></ul></li></ul><h3 id="2-設定功能與內容"><a href="#2-設定功能與內容" class="headerlink" title="2. 設定功能與內容"></a>2. 設定功能與內容</h3><p>除了幫助 SEO 更好的了解網頁內容，許多標籤也有特殊的功能。細節繁多，不及備載，就帶著耐心查看文件吧！</p><ul><li>功能<ul><li>連結<ul><li>a</li></ul></li><li>表單<ul><li>form</li></ul></li></ul></li><li>內容<ul><li>媒體<ul><li>img</li><li>video</li><li>radio</li></ul></li><li>文字<ul><li>標題<ul><li>title</li><li>h1 ~ h6</li></ul></li><li>內文<ul><li>p 段落</li><li>blockquote 引言</li><li>figure 獨立內容，像是雜誌圖片搭配文字說明<ul><li>figcaption 獨立內容說明</li></ul></li></ul></li><li>重要性<ul><li>strong (b)</li><li>em (i)</li><li>del: delete 刪除線 (s) ，常用在特價</li><li>ins: inserted 更新</li></ul></li></ul></li><li>表格 (table)<ul><li>結構<ul><li>caption 標題，表格外說明標題</li><li>thead</li><li>tbody</li><li>tfoot</li></ul></li><li>內容<ul><li>tr: table row，就算沒分欄，裡面也必須有 <code>&lt;td&gt;</code></li><li>td: table definition</li><li>th: table heading</li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> layout </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS | JEST 測試驅動開發 (TDD)</title>
      <link href="/posts/js-TDD/"/>
      <url>/posts/js-TDD/</url>
      
        <content type="html"><![CDATA[<p>TDD (Test-Driven Development) 測試驅動開發，是一種以規格測試起稿，再藉此完善功能的開發方式。老師教學使用的是 npm 套件 jest，不知道還有沒有其他類似功能的套件呢？</p><h2 id="理論"><a href="#理論" class="headerlink" title="理論"></a>理論</h2><ul><li><p>為什麼要先寫測試？</p><ul><li>依據測試規格開發，可避免開發過程中的疏漏。</li><li>撰寫程式碼的過程中，開發人員將保有信心。</li><li>階段性開發，清楚知道錯誤範圍。</li><li>確保重購程式碼的過程順利，在外部條件不改變的情況下，調整內部程式碼。</li></ul></li><li><p>3 A 開發步驟：</p><ul><li>Arrange 設置</li><li>Act 執行</li><li>Assert 斷言</li></ul></li><li><p>❗ 每項測試盡量精簡，確保最小測試範圍。</p></li></ul><h2 id="測試設計"><a href="#測試設計" class="headerlink" title="測試設計"></a>測試設計</h2><p>TDD 的過程分為兩個部分，一個是撰寫測試用的程式碼，一個是撰寫真正的專案功能開發所需要的程式碼。撰寫測試用程式碼時，只需要根據人類語言的邏輯依序寫出美行程式碼，而先不用在意程式是能順利運作。(等到專案功能實作時再修正)</p><ul><li>設置物件 &#x2F; 函數 &#x2F; 類別<ul><li><ol><li>寫出結果判斷<br>這是 JEST 獨有的語法，將比較結果是否符合預期。<br><code>expect(account.balance).toBe(7);</code><br><code>expect(動作).toBe(理想結果)</code></li></ol></li><li><ol start="2"><li>寫出參數判斷<br>為了方便檢視引數導致的變化，建議也將引數作為檢查對象。<br><code>expect(amount).toBe(3);</code></li></ol></li></ul></li></ul><blockquote><h3 id="JEST-的安裝與使用"><a href="#JEST-的安裝與使用" class="headerlink" title="JEST 的安裝與使用"></a>JEST 的安裝與使用</h3><p>使用 npm 安裝後，將 package.json 檔案中的 script:{test: …} 的內容改為「jest」並存檔，之後就可以執行 <code>npm run test</code> 運行 jest 的測試程序了。所有小步驟，全都寫在下面囉！</p><ol start="0"><li>記得所在專案必須先初始化為 npm 專案 <code>npm init -y</code> &gt; <code>-y</code> 表示同意所有預設選項。</li><li>安裝套件 <code>npm install --save-dev jest</code><br>可以縮寫為 <code>npm i -d</code>，表示安裝 jest，並且記錄到 package.json 檔案中的 develope 開發軟體清單中。</li><li>查看套件是否有順利安裝<br>查看 package &#x2F; dependencies 的屬性是否有安裝的套件。</li><li>修改 script 指令</li></ol><ul><li><ol><li>修改 <code>test</code> 指令為 <code>jest</code> &gt; <code>scripts: &#123; test: &quot;jest&quot;&#125;</code> 。</li></ol></li><li><ol start="2"><li>❗ 存檔 ❗</li></ol></li></ul><ol start="4"><li>新增測試檔案的專屬資料夾 <code>__tests__</code><br>如果沒有建立此資料夾，將無法順利運作。請務必記得在 tests 結尾加「s」❗</li><li>新增測試用程序的檔案 <code>xxx_spec.js</code><br>spec 是 specification 的縮寫，就是「規格」的意思。</li></ol></blockquote><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>根據 3A 的測試理論，先從物件的宣告開始，再撰寫程式運作的順序及過程。</p><ol><li>宣告</li></ol><ul><li>const &#x2F; let &#x2F; var</li><li>class</li><li>function</li></ul><ol start="2"><li>運作 function()</li></ol><blockquote><h3 id="主管帶領新人測試開發"><a href="#主管帶領新人測試開發" class="headerlink" title="主管帶領新人測試開發"></a>主管帶領新人測試開發</h3><p>未來若有幸擔任主管職位，訓練新人進行測試開發時，可以先教導新人實作，而後再教導新人撰寫規格書。因為主管對於實務上需要檢查的案例有較豐富的經驗，撰寫規格書時更能確保品質，也具有將客戶需求轉換為程式規格的能力。</p><ul><li><ol><li>主管寫規格，新人實作</li></ol></li><li><ol start="2"><li>新人寫規格，主管實作</li></ol></li></ul></blockquote><h2 id="實作歷程範例"><a href="#實作歷程範例" class="headerlink" title="實作歷程範例"></a>實作歷程範例</h2><p>以銀行帳戶的建立，以及基本功能開發為例，包含存錢和領錢的功能。</p><ul><li>建構基本架構</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BankAccount</span> &#123;</span><br><span class="line">  <span class="title function_">deposit</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">balance</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;可以存錢&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 3A, Arrange, Act, Assert</span></span><br><span class="line">  <span class="comment">// 1. 生帳號，開戶 10</span></span><br><span class="line">  <span class="keyword">const</span> account = <span class="keyword">new</span> <span class="title class_">BankAccount</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="comment">// 2. 存 10 元</span></span><br><span class="line">  account.<span class="title function_">deposit</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="comment">// 3. 餘 20 元</span></span><br><span class="line">  <span class="title function_">expect</span>(account.<span class="property">balance</span>).<span class="title function_">toBe</span>(<span class="number">20</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>完整化</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BankAccount</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">amount</span> = amount;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">deposit</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">amount</span> += amount;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">balance</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">amount</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;可以存錢 20 元&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 3A, Arrange, Act, Assert</span></span><br><span class="line">  <span class="comment">// 1. 生帳號，開戶 10</span></span><br><span class="line">  <span class="keyword">const</span> account = <span class="keyword">new</span> <span class="title class_">BankAccount</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="comment">// 2. 存 20 元</span></span><br><span class="line">  account.<span class="title function_">deposit</span>(<span class="number">20</span>);</span><br><span class="line">  <span class="comment">// 3. 餘 30 元</span></span><br><span class="line">  <span class="title function_">expect</span>(account.<span class="property">balance</span>).<span class="title function_">toBe</span>(<span class="number">30</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>持續完整化，直到符合所有規格</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BankAccount</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">amount</span> = amount;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">deposit</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (amount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">amount</span> += amount;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">withdraw</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (amount &gt; <span class="number">0</span> &amp;&amp; amount &lt;= <span class="variable language_">this</span>.<span class="property">amount</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">amount</span> -= amount;</span><br><span class="line">      <span class="keyword">return</span> amount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">balance</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">amount</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;可以存 10 元&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> account = <span class="keyword">new</span> <span class="title class_">BankAccount</span>(<span class="number">10</span>);</span><br><span class="line">  account.<span class="title function_">deposit</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="title function_">expect</span>(account.<span class="property">balance</span>).<span class="title function_">toBe</span>(<span class="number">20</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;可以存 20 元&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> account = <span class="keyword">new</span> <span class="title class_">BankAccount</span>(<span class="number">10</span>);</span><br><span class="line">  account.<span class="title function_">deposit</span>(<span class="number">20</span>);</span><br><span class="line">  <span class="title function_">expect</span>(account.<span class="property">balance</span>).<span class="title function_">toBe</span>(<span class="number">30</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;不可以存 0 元或是小於 0 元的金額&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> account = <span class="keyword">new</span> <span class="title class_">BankAccount</span>(<span class="number">10</span>);</span><br><span class="line">  account.<span class="title function_">deposit</span>(-<span class="number">20</span>);</span><br><span class="line">  <span class="title function_">expect</span>(account.<span class="property">balance</span>).<span class="title function_">toBe</span>(<span class="number">10</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;可以領錢&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> account = <span class="keyword">new</span> <span class="title class_">BankAccount</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="keyword">const</span> amount = account.<span class="title function_">withdraw</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">expect</span>(amount).<span class="title function_">toBe</span>(<span class="number">3</span>);</span><br><span class="line">  <span class="title function_">expect</span>(account.<span class="property">balance</span>).<span class="title function_">toBe</span>(<span class="number">7</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;不能領 0 元或是小於 0 元的金額&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> account = <span class="keyword">new</span> <span class="title class_">BankAccount</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="keyword">const</span> amount = account.<span class="title function_">withdraw</span>(-<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">expect</span>(amount).<span class="title function_">toBe</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="title function_">expect</span>(account.<span class="property">balance</span>).<span class="title function_">toBe</span>(<span class="number">10</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;不能領超過本身餘額&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> account = <span class="keyword">new</span> <span class="title class_">BankAccount</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="keyword">const</span> amount = account.<span class="title function_">withdraw</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">expect</span>(amount).<span class="title function_">toBe</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="title function_">expect</span>(account.<span class="property">balance</span>).<span class="title function_">toBe</span>(<span class="number">10</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java-script </tag>
            
            <tag> testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>個人部落格架設-1 | GitHub Pages 建立個人網域</title>
      <link href="/posts/github-pages/"/>
      <url>/posts/github-pages/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在高見龍老師的建議下，開始以 Blog 記錄學習過程。<br>加強學習記憶，讓自己離成功更進一步。</p></blockquote><p>架設個人網站，能夠完全掌握個人流量，以及確保資料的保存。相較於一般的部落格平台，可以避免因為平台維護而損失流量，或是因為平台關閉而遺失資料。而且架設基本的個人「靜態網站」，只需要短短 10 分鐘。在靜態網站下，每個觀看者所看到的網頁都是相同的，是固定的網頁內容。不像「動態網站」，會因為使用者的差異，而呈現個人化的顯示資料，例如：推薦商品、廣告、未讀文章等等。</p><table><thead><tr><th>優點</th><th>缺點</th></tr></thead><tbody><tr><td>個人資料庫</td><td>必須學習 Git, GitHub</td></tr><tr><td>個人化版面設計</td><td>必須學習 HTML, CSS, JS</td></tr><tr><td>可以個人化網域<br>(需支付網域費用，513up&#x2F;年)</td><td>可能要花費個人網域費用</td></tr></tbody></table><h2 id="建立-user-name-github-io-的-repo"><a href="#建立-user-name-github-io-的-repo" class="headerlink" title="建立 user-name.github.io 的 repo"></a>建立 <code>user-name.github.io</code> 的 repo</h2><p>GitHub 是基於 Git 工具而設立的網路服務，其中 repo (repository) 就是儲存資料的倉庫。在一個 GitHub 中可以建立多個 repo，分別儲存不同的專案，並且依照個人習慣隨意命名。不過我們這次使用的是 GitHub 特別提供的 GitHub Pages 服務，在符合 GitHub Pages 的命名規則下才能順利運作。因此用於建立個人網域的專案名稱，必須是 <code>user-name.github.io</code>——以 GitHub 帳號起頭，並且以 <code>.github.io</code> 結尾。由此，個人網站的網域空間就已建立完畢，可以開始編寫個人網站的程式碼了。(個人網站網址即 <code>https://user-name.github.io</code>)</p><h2 id="影片完整教學"><a href="#影片完整教學" class="headerlink" title="影片完整教學"></a>影片完整教學</h2><p><a href="https://www.youtube.com/watch?v=erKYtw4Rfhk&ab_channel=CodeSheep%E7%A8%8B%E5%BA%8F%E7%BE%8A">手把手教你从 0 开始搭建自己的个人博客</a>，程序羊</p><iframe width="560" height="315" src="https://www.youtube.com/embed/erKYtw4Rfhk?si=HS8ni444vEcNHFnH&amp;start=886" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><hr><p>參考資料：</p><ul><li><a href="https://gitbook.tw/chapters/github/using-github-pages">使用 GitHub 免費製作個人網站</a>，高見龍</li><li><a href="https://medium.com/%E9%80%B2%E6%93%8A%E7%9A%84-git-git-git/%E5%BE%9E%E9%9B%B6%E9%96%8B%E5%A7%8B-%E7%94%A8github-pages-%E4%B8%8A%E5%82%B3%E9%9D%9C%E6%85%8B%E7%B6%B2%E7%AB%99-fa2ae83e6276">從零開始: 用 github pages 上傳靜態網站</a>，sexyoung</li><li><a href="https://pages.github.com/">GitHub Pages</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 個人部落格架設 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
            <tag> github-pages </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
